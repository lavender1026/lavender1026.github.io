<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[quickLook 插件安装 让你的开发更效率]]></title>
      <url>http://lavender1026.github.io/2016/10/17/quicklook/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 OSX 的朋友对于这个系统当中的 QuickLook 一定不会陌生，无论在哪里，几乎操作系统的全部地方，对于图片的内容，你都可以选中它，然后按下空格来快速查看这张图片是什么而不需要打开看图软件或者图片编辑器；或者一些文本的文档以及其他视频和音频——这实在是太方便了。</p>
<p>不过，这个 QuickLook 也不是那么万能，比如说它只能支持苹果预置的几种常见格式（纯文本文档，MP4 格式的视频，MP3 格式的音频以及 JPEG 和 PNG 格式的图片等），一旦遇到点新颖的就不灵验了，比如同样是纯文本的 Markdown,json,看着就不是很舒服。那这里我就给大家推荐一下quicklook可以安装的小插件</p>
<p>Homebrew<br>首先，安装插件我们需要先装上，Homebrew，那你可以来<a href="http://brew.sh/" target="_blank" rel="external">这里</a>看看，总之，打开你的终端，我们使用下面的代码来安装 brew：<br><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>
<p>下面是我常用的一些插件</p>
<table>
<thead>
<tr>
<th>qlmarkdown</th>
<th>用于快速查看markdown</th>
</tr>
</thead>
<tbody>
<tr>
<td>qlcolorrode</td>
<td>使quicklook支持代码高亮</td>
</tr>
<tr>
<td>betterzipql</td>
<td>空格可以查看压缩包内容</td>
</tr>
<tr>
<td>qlimagesize</td>
<td>查看图片同时可以显示尺寸</td>
</tr>
<tr>
<td>qljson</td>
<td>可以按格式显示json</td>
</tr>
</tbody>
</table>
<p>然后，我们就可以使用命令  brew cask 来让 brew 自动配置 cask 了。</p>
<p><code>brew cask install qlcolorcode qlmarkdown quicklook-csv betterzipql qlimagesize qljson</code><br>然后，其实还有更多的格式支持，大家可以再去<a href="http://www.quicklookplugins.com/" target="_blank" rel="external">这里</a>自行DIY</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各类加密算法]]></title>
      <url>http://lavender1026.github.io/2016/08/07/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="加密算法介绍"><a href="#加密算法介绍" class="headerlink" title="加密算法介绍"></a>加密算法介绍</h1><p>加密算法应该属于计算机专业密码学中的一些知识，这里总结一下从网上看到的知识，方便以后的查阅。</p>
<p>加密算法有很多种，一般有主要三类,分别如下</p>
<ol>
<li>对称型算法</li>
<li>非对称性算法</li>
<li>散列算法<a id="more"></a>
<h2 id="1-对称性加密算法"><a href="#1-对称性加密算法" class="headerlink" title="1.对称性加密算法"></a>1.对称性加密算法</h2>对称性加密算法有AES,DES,3DES。其中，DES是一种分组数据加密技术（先将数据分成固定长度的小数据块，之后进行加密），速度较快，适用于大量数据加密，而3DES是一种基于DES的加密算法，使用3个不同密匙对同一个分组数据块进行3次加密，如此以使得密文强度更高。<br>相较于DES和3DES算法而言，AES算法有着更高的速度和资源使用效率，安全级别也较之更高了，被称为下一代加密标准。</li>
</ol>
<h2 id="非对称性加密算法"><a href="#非对称性加密算法" class="headerlink" title="非对称性加密算法"></a>非对称性加密算法</h2><p>非对称性加密算法有RSA,DSA,ECC。这其中，RSA和DSA的安全性及其它各方面性能都差不多，而ECC较之则有着很多的性能优越，包括处理速度，带宽要求，存储空间等等</p>
<h2 id="线性散列算法-签名算法"><a href="#线性散列算法-签名算法" class="headerlink" title="线性散列算法(签名算法)"></a>线性散列算法(签名算法)</h2><p>MD5,SHA1,HMAC<br>这几种算法只生成一串不可逆的密文，经常用其效验数据传输过程中是否经过修改，因为相同的生成算法对于同一明文只会生成唯一的密文，若相同算法生成的密文不同，则证明传输数据进行过了修改。通常在数据传说过程前，使用MD5和SHA1算法均需要发送和接收数据双方在数据传送之前就知道密匙生成算法，而HMAC与之不同的是需要生成一个密匙，发送方用此密匙对数据进行摘要处理（生成密文），接收方再利用此密匙对接收到的数据进行摘要处理，再判断生成的密文是否相同。</p>
<h2 id="对称与非对称算法比较"><a href="#对称与非对称算法比较" class="headerlink" title="对称与非对称算法比较"></a>对称与非对称算法比较</h2><p>  以上综述了两种加密方法的原理，总体来说主要有下面几个方面的不同：<br>l         在管理方面：公钥密码算法只需要较少的资源就可以实现目的，在密钥的分配上，两者之间相差一个指数级别（一个是n一个是n2）。所以私钥密码算法不适应广域网的使用，而且更重要的一点是它不支持数字签名。<br>l         在安全方面：由于公钥密码算法基于未解决的数学难题，在破解上几乎不可能。对于私钥密码算法，到了AES虽说从理论来说是不可能破解的，但从计算机的发展角度来看。公钥更具有优越性。<br>l         从速度上来看：AES的软件实现速度已经达到了每秒数兆或数十兆比特。是公钥的100倍，如果用硬件来实现的话这个比值将扩大到1000倍。</p>
<h2 id="加密算法的选择"><a href="#加密算法的选择" class="headerlink" title="加密算法的选择"></a>加密算法的选择</h2><p>由于非对称加密算法的运行速度比对称加密算法的速度慢很多，当我们需要加密大量的数据时，建议采用对称加密算法，提高加解密速度。<br>对称加密算法不能实现签名，因此签名只能非对称算法。<br>由于对称加密算法的密钥管理是一个复杂的过程，密钥的管理直接决定着他的安全性，因此当数据量很小时，我们可以考虑采用非对称加密算法。<br>在实际的操作过程中，我们通常采用的方式是：采用非对称加密算法管理对称算法的密钥，然后用对称加密算法加密数据，这样我们就集成了两类加密算法的优点，既实现了加密速度快的优点，又实现了安全方便管理密钥的优点。<br>那采用多少位的密钥呢？ RSA建议采用1024位的数字，ECC建议采用160位，AES采用128为即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OC混编]]></title>
      <url>http://lavender1026.github.io/2016/07/30/C++%E6%B7%B7%E7%BC%96/</url>
      <content type="html"><![CDATA[<h2 id="为什么要使用C-混编"><a href="#为什么要使用C-混编" class="headerlink" title="为什么要使用C++混编"></a>为什么要使用C++混编</h2><h4 id="1）需要使用工具库或者源码是C-的"><a href="#1）需要使用工具库或者源码是C-的" class="headerlink" title="1）需要使用工具库或者源码是C++的"></a>1）需要使用工具库或者源码是C++的</h4><p>各个平台，各种语言，都会有很多开源的工具和库文件方便大家学习和使用，但如C与C++这版经典的语言，很多底层的，算法型的库都是用C++实现的，尤其是很多人脸识别，图形滤镜算法，视频处理算法，甚至底层图形渲染OpenGL</p>
<h4 id="2）C-执行效率快"><a href="#2）C-执行效率快" class="headerlink" title="2）C++执行效率快"></a>2）C++执行效率快</h4><p>大家都知道C++的执行效率快，所以在高复杂度高算法层面的开发内容里，大多都选择使用C++来完成，我是做客户端的，虽然不像做机器学习，大数据处理等在工作中需要广泛运用高效算法，但上面提到的人脸识别，图形滤镜算法，甚至视频处理，还有很多游戏内部需要的游戏AI，都是有可能运用在我们熟知的客户端开发之中<br><a id="more"></a></p>
<h4 id="3）跨平台"><a href="#3）跨平台" class="headerlink" title="3）跨平台"></a>3）跨平台</h4><p>C++是编译型跨平台的，C++的代码编译出来的二进制文件可以在android，iOS，甚至WP上都可以正常运行，可谓是真·跨平台。<br>然而说到跨平台，肯定不少人提起H5跨平台呀，ReactNative跨平台呀，这类通常属于解释型跨平台，约定好一种脚本语言，底层辅助以各平台的基础实现，甚至底层就是借助C++实现，通过底层解读脚本语言，在运行时进行解释实现逻辑，就好比webkit作为浏览器的核心，JavaScriptCore作为RN的核心，虽然开发中使用了js进行写代码，但是究其本质还是在运行时解释js在进行native执行的。js代码并不参与编译，这类跨平台在编译时参与编译的，正是那套语法解释器+NA底层代码，他们或多或少还是通过C++实现的</p>
<h3 id="我们使用C-做逻辑的原因"><a href="#我们使用C-做逻辑的原因" class="headerlink" title="我们使用C++做逻辑的原因"></a>我们使用C++做逻辑的原因</h3><p>我们做客户端，核心模块使用C++的原因其实就是出自（2）（3）两点，因为我们的业务涉及极其复杂的文字排版，而无论是iOS平台还是安卓平台，基础排版是很难满足中文甚至我大天朝独有政治要求的，想要实现势必要在每个平台上分别封装一套极度复杂的排版策略控制，因此我们放弃了使用CoreText的基础排版API（安卓上用啥排版不知道），而选择用C++实现一套通用于两个平台的排版策略，当然在排版速度效率上也是要很高要求的</p>
<h3 id="ObjectiveC-与-C-的共同点"><a href="#ObjectiveC-与-C-的共同点" class="headerlink" title="ObjectiveC 与 C++ 的共同点"></a>ObjectiveC 与 C++ 的共同点</h3><p>在iOS开发之中，OC代码与C++代码可以完美的融合在一块，何谓完美？你甚至可以上一行刚敲完[NSArray objectAtIndex:xx]（OC代码）下一行就使用STL构建一个C++的List数组（C++代码），他们之间可以完美编译，生成正常的程序，并且还可以单步debug，随时跟进一层一层的方法，刚刚单步跳出一个OC的messageSend，马上就可以单步跟进一个C++ Class的function，这之间没有一点障碍，所有变量，指针，结构体，数据，都可以任意查看，二者之间畅通无阻</p>
<p>向下完全兼容C是他们的共同点和纽带<br>为什么会这样？因为C++与OC都完全向下兼容C<br>所有的OC对象，虽然有ARC辅助内存管理，但他本质上还是一个void <em>，同理C++也一样是void </em>，OC之所以调用函数叫做发送消息，是因为封装了层独有的runtime机制（这机制还是C的），但归根结底每个函数实体依然是一个IMP，依然是一个函数指针，这一点和C++也一样，所以他们之间的衔接才会如此通畅</p>
<p>其他混编情况可就没那么容易了<br>android混编C++，恩很麻烦，只能先编译成so，两个环境如果要交互，要先手写一套JNI，把C++环境下的数据和java环境下的数据进行手动转换，并且断点调试没法断点进入so内，想要debug调试，必须靠fwrite写log到本地磁盘调试╮(╯_╰)╭</p>
<p>我以前搞过游戏，做过C++内混编lua脚本，这俩互通更蛋疼，虽然lua的解释器底层是用C写的，但是所有的内存都是lua解释器（或者叫虚拟机）内的数据，因此如果二者要互通，也要写一个通道来交换数据，这个交换数据，就是通过超级烦琐的数据对齐，压栈，出栈来互通。</p>
<p>前一阵子也学习了一些JSPatch，他其实可以看做是js代码混编Oc的模范工程，同lua一样，整个js的运行环境也是依赖于JavaScriptCore提供的一套JS虚拟机来执行，他有着自己的上下文JSContext，虽说简单的通用数据，字符串，数组，字典，被JavaScriptCore自动的执行完了转换，但一旦需要两个环境交换独有数据类型，例如js里面的function，例如oc里面的自定义NSObject，那么就需要JSValue这个对象起到转换和传递的作用</p>
<h3 id="ObjectiveC如何混编C"><a href="#ObjectiveC如何混编C" class="headerlink" title="ObjectiveC如何混编C++"></a>ObjectiveC如何混编C++</h3><p>想要创建一个纯C++类，你只需要创建.h开头和.cpp开头的文件，直接导入工程就好，如果需要使用一些C++的标准库，可以直接从Xcode导入libstdC++</p>
<p>如果你想创建一个能即识别C++又识别OC的对象，只需要照常创建一个.h 文件和.m文件，然后将.m文件重命名成.mm文件，就是告诉编译器，这个文件可以进行混编 — ObjectiveC++（名字是不是有点酷）</p>
<p>如果你想创建一个纯OC类，那这还需要用我说么？</p>
<p>现在你的工程里，可以有这三种文件存在，基本上就可以满足我们的混编需求了。</p>
<p>怎么样是不是很想赶快试试了？</p>
<p>例子：在一个OC环境里调用C++<br>我的例子会一步一步来，甚至有的步骤中可能是错误的代码，给大家展示完错误的代码后，进行说明，再放上正确的代码,</p>
<p>代码也不全是完整代码</p>
<p>CppObject.h C++的头文件 .cpp文件留空，先不写逻辑</p>
<figure class="highlight plain"><figcaption><span><string></string></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class CppObject</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void ExampleMethod(const std::string&amp; str)&#123;&#125;;</span><br><span class="line">    // constructor, destructor, other members, etc.</span><br><span class="line">&#125;;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<p>OCObject.h OC的头文件 .m文件先改为.mm，但先不写逻辑</p>
<figure class="highlight plain"><figcaption><span><foundation foundation.h=""></foundation></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//#import &quot;CppObject.h&quot;</span><br><span class="line">@interface OcObject : NSObject &#123;</span><br><span class="line">    CppObject* wrapped;</span><br><span class="line">&#125;</span><br><span class="line">@property CppObject* wrapped2;</span><br><span class="line">- (void)exampleMethodWithString:(NSString*)str;</span><br><span class="line">// other wrapped methods and properties</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>头文件准备完毕，实现文件，我先不写逻辑，先跑一下看看会有什么问题？</p>
<p>跑完了以后会编译报错，报错的原因很简单，你在OCObject.h中引用了C++的头文件，xcode不认识，无法编译通过。</p>
<p>咦？刚刚不是说好了C++和OC无缝互通了么，这咋又不认识了？原因很简单，我们通过修改.m为.mm文件，能让编译器xcode知道这是一个混编文件，但是我可没说修改.h为.hh文件哟，是这样的，对于xcode来说，可以认识.mm的混编语法，但是不认识.h文件中的混编语法，如果.h全都是C++的写法，没有问题，如果.h全都是OC的写法，没有问题，如果.h里面有C++又有OC？那妥妥的有问题（.h中引入的其他头文件也算在内）</p>
<p>怎么处理呢？两个办法</p>
<p>不在.h里写混编了，那我移到.mm里呗~~~</p>
<p>不让我写c++？ok，我写C，反正写C是没错的，所以老子写void *写id</p>
<p>这里的例子我先写到.mm文件里</p>
<figure class="highlight plain"><figcaption><span>"OcObject.h"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;CppObject.h&quot;</span><br><span class="line">@interface OcObject () &#123;</span><br><span class="line">    CppObject* wrapped;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line">@implementation OcObject</span><br><span class="line">- (void)exampleMethodWithString:(NSString*)str</span><br><span class="line">&#123;</span><br><span class="line">    // NOTE: if str is nil this will produce an empty C++ string</span><br><span class="line">    // instead of dereferencing the NULL pointer from UTF8String.</span><br><span class="line">    std::string cpp_str([str UTF8String], [str lengthOfBytesUsingEncoding:NSUTF8StringEncoding]);</span><br><span class="line">    wrapped-&gt;ExampleMethod(cpp_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这不~妥了没问题了~，我们再去补上CPP文件中的函数实现，随便写个printf()，输出个string，例子就完成了</p>
<h3 id="例子：在一个C-环境里调用OC"><a href="#例子：在一个C-环境里调用OC" class="headerlink" title="例子：在一个C++环境里调用OC"></a>例子：在一个C++环境里调用OC</h3><p>首先我们要打造一个C++的环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">class AntiCppObject</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    AntiCppObject();</span><br><span class="line">    void ExampleMethod(const std::string&amp; str)&#123;&#125;;</span><br><span class="line">    // constructor, destructor, other members, etc.</span><br><span class="line">&#125;;</span><br><span class="line">--AntiCppObject.cpp</span><br><span class="line">#include &quot;AntiCppObject.h&quot;</span><br><span class="line">AntiCppObject::AntiCppObject()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们再准备一个OC类接入C++，m文件我就不补充完了，随便写个NSLog就好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface AntiOcObject : NSObject</span><br><span class="line">- (void)function;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>现在打算接入C++环境了，首先先把.CPP改成.mm文件，妥妥哒</p>
<p>然后修改头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;AntiOcObject.h&quot;</span><br><span class="line">class AntiCppObject</span><br><span class="line">&#123;</span><br><span class="line">    AntiOcObject* AntiOc;</span><br><span class="line">public:</span><br><span class="line">    AntiCppObject();</span><br><span class="line">    void ExampleMethod(const std::string&amp; str)&#123;&#125;;</span><br><span class="line">    // constructor, destructor, other members, etc.</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>经过了刚才的例子，看到这应该立马反应过来，这不对，头文件不能混编，会报错的。那应该怎么做呢？</p>
<p>做法还是上面提到的，要么void <em>，要么想办法把定义写在.mm文件里，老规矩，void </em>先不提，我们先在.h中写个结构体，藏起来那个oc的对象，在mm文件中进行声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">struct sthStruct;</span><br><span class="line">class AntiCppObject</span><br><span class="line">&#123;</span><br><span class="line">    sthStruct* sth;</span><br><span class="line">public:</span><br><span class="line">    AntiCppObject();</span><br><span class="line">    void function();</span><br><span class="line">    // constructor, destructor, other members, etc.</span><br><span class="line">&#125;;</span><br><span class="line">---AntiCppObject.cpp</span><br><span class="line">#include &quot;AntiCppObject.h&quot;</span><br><span class="line">#import &quot;AntiOcObject.h&quot;</span><br><span class="line">struct sthStruct</span><br><span class="line">&#123;</span><br><span class="line">    AntiOcObject* oc;</span><br><span class="line">&#125;;</span><br><span class="line">AntiCppObject::AntiCppObject()</span><br><span class="line">&#123;</span><br><span class="line">    AntiOcObject* t =[[AntiOcObject alloc]init];</span><br><span class="line">    sth = new sthStruct;</span><br><span class="line">    sth-&gt;oc = t;</span><br><span class="line">&#125;</span><br><span class="line">void AntiCppObject::function()</span><br><span class="line">&#123;</span><br><span class="line">    [this-&gt;sth-&gt;oc function];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你看这样就实现了在C++中调用OC</p>
<h2 id="ObjectiveC-混编注意事项"><a href="#ObjectiveC-混编注意事项" class="headerlink" title="ObjectiveC++混编注意事项"></a>ObjectiveC++混编注意事项</h2><ul>
<li>只需要将.m文件重命名成.mm文件，就是告诉编译器，这个文件可以进行混编 — ObjectiveC++</li>
<li>在一个项目里使用两种语言，就要尽可能的把这两种语言分开，尽管你可以一口气将所有的文件重命名，但是两种语言差异性还是很大，混乱使用，处理起来会很困难</li>
<li>header文件没有后缀名变化,没有.hh文件^_^。所以我们要保持头文件的整洁，将混编代码从头文件移出到mm文件中，保证头文件要么是纯正C++，要么是纯正OC，（当然，有C是绝对没问题的）</li>
<li>Objective-C向下完全兼容C，C++也是，有时候也可以灵活的使用void *指针，当做桥梁，来回在两个环境间传递（上面的例子没有体现）</li>
</ul>
<h2 id="小心你的内存"><a href="#小心你的内存" class="headerlink" title="小心你的内存"></a>小心你的内存</h2><ul>
<li>按着之前的原则，C++和OC两部分尽量区分开，各自在各自的独立区域内维护好自己的内存，Objective-C可以是arc也可mrc，C++开发者自行管理内存</li>
<li>在.mm文件中，OC环境中在init 和dealloc中对C++类进行 new 和 delete操作</li>
<li>在.mm文件中，在C++环境中构造和析构函数中进行init 和 release操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-(id)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        wrapped = new CppObject();</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">-(void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    delete wrapped;</span><br><span class="line">&#125;</span><br><span class="line">--AntiCppObject.mm</span><br><span class="line">AntiCppObject::AntiCppObject()</span><br><span class="line">&#123;</span><br><span class="line">    AntiOcObject* t =[[AntiOcObject alloc]init];</span><br><span class="line">    sth = new sthStruct;</span><br><span class="line">    sth-&gt;oc = t;</span><br><span class="line">&#125;</span><br><span class="line">AntiCppObject::~AntiCppObject()</span><br><span class="line">&#123;</span><br><span class="line">    if (sth) &#123;</span><br><span class="line">        [sth-&gt;oc release];//arc的话，忽略掉这句话不写</span><br><span class="line">    &#125;</span><br><span class="line">    delete sth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子告诉我们什么？</p>
<p>如果我们通过oc的方式创建出来的，他的内存自然归OC管理，如果是mrc，请使用release，如果是arc，只要置空，自然会自动释放</p>
<p>如果我们通过C++的方式，构造函数new出来的，那我们就要手动的使用析构函数就释放他</p>
<p>其实很多事情原理是一样的</p>
<ul>
<li>我们在iOS开发使用CF函数的时候，但凡使用CFCreateXX的一定要手动自己调用CFRlease</li>
<li>我们在编写C++的时候，使用malloc的一定要自己free，使用new的一定要自己delete</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[收藏的博客]]></title>
      <url>http://lavender1026.github.io/2016/03/17/%E6%94%B6%E8%97%8F%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>整理一下自己看过的精品博客以及网站，都是质量不错的博客</p>
<h2 id="推荐博客"><a href="#推荐博客" class="headerlink" title="推荐博客"></a>推荐博客</h2><ul>
<li><a href="http://www.huangyibiao.com/" target="_blank" rel="external">标哥的技术博客</a> </li>
<li><a href="http://blog.devtang.com/" target="_blank" rel="external">唐巧的博客</a> </li>
<li><a href="http://blog.ibireme.com/" target="_blank" rel="external">ibireme的博客</a></li>
<li><a href="https://onevcat.com/" target="_blank" rel="external">喵神博客</a></li>
<li><a href="http://blog.sunnyxx.com/" target="_blank" rel="external">sunnyxx的博客</a> </li>
<li><a href="http://blog.leichunfeng.com/" target="_blank" rel="external">雷纯锋的技术博客</a></li>
<li><a href="http://swift.gg/" target="_blank" rel="external">SwiftGG 翻译组 - 高质量的 Swift 译文网站</a></li>
<li><a href="http://swifter.tips/" target="_blank" rel="external">Swifter - 100 个 Swift 必备 tips</a> </li>
<li><a href="http://objccn.io/" target="_blank" rel="external">objc中国</a> | 内容丰富的OC学习网站，虽然现已停刊，但是里面的内容仍值得拜读</li>
<li><a href="http://tech.meituan.com/" target="_blank" rel="external">美团点评技术团队</a> | 经常分享一些干货知识 </li>
<li><a href="http://nshipster.cn/" target="_blank" rel="external">NSHipster 中文</a></li>
<li><a href="http://www.ios-wiki.com/" target="_blank" rel="external">iOS wiki</a> | 包含技术周报、好文章 、iOS 安全</li>
<li><a href="http://www.jianshu.com/users/b82d2721ba07/latest_articles" target="_blank" rel="external">叶孤城_ - 简书</a></li>
<li><a href="http://southpeak.github.io/" target="_blank" rel="external">南峰子的技术博客</a></li>
<li><a href="http://tutuge.me/" target="_blank" rel="external">土土哥的技术 Blog</a></li>
<li><a href="http://beyondvincent.com/" target="_blank" rel="external">破船之家</a></li>
<li><a href="http://app.memect.com/" target="_blank" rel="external">APP日报</a></li>
<li><a href="http://yulingtianxia.com/" target="_blank" rel="external">玉令天下的博客</a></li>
<li><a href="https://bestswifter.com/" target="_blank" rel="external">bestswifter的博客</a></li>
<li><a href="http://lastdays.cn/" target="_blank" rel="external">LastDays的博客</a></li>
<li><a href="http://www.jianshu.com/users/40e4dced948f/latest_articles" target="_blank" rel="external">kuailejim</a> | wujim</li>
<li><a href="http://valiantcat.com/" target="_blank" rel="external">南栀倾寒的博客</a></li>
<li><a href="http://desgard.com/" target="_blank" rel="external">冬瓜的博客</a></li>
<li><a href="http://kittenyang.com/" target="_blank" rel="external">kitten时间胶囊</a></li>
<li><a href=""></a></li>
<li><a href="http://gracelancy.com/" target="_blank" rel="external">蓝晨钰的博客</a></li>
<li><a href="http://www.tanhao.me/" target="_blank" rel="external">谭灏的博客</a> | ：目前就职于腾讯mac管家部门，他是一名 OSX、iOS 程序员，他的博客中有许多mac，ios开发的文章，值得大家去品读</li>
<li><a href="http://baiduhidevios.github.io/" target="_blank" rel="external">百度hiios团队周报</a></li>
<li><a href="http://swiftcafe.io/" target="_blank" rel="external">swift cafe</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RunLoop原理及核心机制]]></title>
      <url>http://lavender1026.github.io/2016/02/25/RunLoop%E5%8E%9F%E7%90%86%E5%92%8C%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>#RunLoop的定义</p>
<p>当有持续的异步任务需求时，我们需要创建一个独立的生命周期可控的线程。RunLoop就是控制线程生命周期并接收事件进行处理的机制。</p>
<p>#RunLoop是iOS事件响应与任务处理最核心的机制，它贯穿iOS整个系统。</p>
<p>Foundation: NSRunLoop<br>Core Foundation: CFRunLoop 核心部分，代码开源，C 语言编写，跨平台<br><a id="more"></a></p>
<p>#1.目的</p>
<p>通过RunLoop机制实现省电，流畅，响应速度快，用户体验好</p>
<p>#2.理解</p>
<p>进程相当于一家工厂，线程则是一个流水线，Run Loop属于流水线上的主管；<br>1&gt;当工厂接到商家的订单分配给这个流水线时，Run Loop就启动这个流水线，让流水线动起来，生产产品；<br>2&gt;当产品生产完毕时，Run Loop就会暂时停下流水线，节约资源。<br>RunLoop管理流水线，流水线才不会因为无所事事被工厂销毁；而不需要流水线时，就会辞退RunLoop这个主管，即退出线程，把所有资源释放。</p>
<p>#RunLoop并不是iOS平台的专属概念，在任何平台的多线程编程中，为控制线程的生命周期，接收处理异步消息都需要类似RunLoop的循环机制实现，Android的Looper就是类似的机制。</p>
<p>#3.特性</p>
<p>1&gt; 主线程的RunLoop在应用启动的时候就会自动创建<br>2&gt; 其他线程则需要在该线程下自己启动<br>3&gt; 不能自己创建RunLoop<br>4&gt; RunLoop并不是线程安全的，所以需要避免在其他线程上调用当前线程的RunLoop<br>5&gt; RunLoop负责管理autoreleasepools<br>6&gt; RunLoop负责处理消息事件，即输入源事件和计时器事件</p>
<p>#4.RunLoop机制</p>
<p>主线程 (有 RunLoop 的线程) 几乎所有函数都从以下六个之一的函数调起:</p>
<p>CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION<br>CFRunloop is calling out to an abserver callback function<br>用于向外部报告 RunLoop 当前状态的更改，框架中很多机制都由 RunLoopObserver 触发，如 CAAnimation</p>
<p>CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK<br>CFRunloop is calling out to a block<br>消息通知、非延迟的perform、dispatch调用、block回调、KVO</p>
<p>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE<br>CFRunloop is servicing the main desipatch queue</p>
<p>CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION<br>CFRunloop is calling out to a timer callback function<br>延迟的perform, 延迟dispatch调用</p>
<p>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION<br>CFRunloop is calling out to a source 0 perform function<br>处理App内部事件、App自己负责管理（触发），如UIEvent、CFSocket。普通函数调用，系统调用</p>
<p>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION<br>CFRunloop is calling out to a source 1 perform function<br>由RunLoop和内核管理，Mach port驱动，如CFMachPort、CFMessagePort</p>
<p>#5.RunLoop 架构</p>
<p>#RunLoop 原理和核心机制</p>
<p>RunLoop主要有以下六种状态：</p>
<p>kCFRunLoopEntry – 进入runloop循环<br>kCFRunLoopBeforeTimers – 处理定时调用前回调<br>kCFRunLoopBeforeSources – 处理input sources的事件<br>kCFRunLoopBeforeWaiting – runloop睡眠前调用<br>kCFRunLoopAfterWaiting – runloop唤醒后调用<br>kCFRunLoopExit – 退出runloop<br>RunLoop 运行时调用栈</p>
<p>#主线程App运行时<br>RunLoop 原理和核心机制</p>
<p>RunLoopObserver与Autorelease Pool的关系<br>UIKit 通过 RunLoopObserver 在 RunLoop 两次 Sleep 间对 Autorelease Pool 进行 Pop 和 Push 将这次 Loop 中产生的 Autorelease 对象释放。</p>
<p>#RunLoop的挂起与唤醒</p>
<p>指定用于唤醒的 mach_port 端口<br>调用 mach_msg 监听唤醒端口，被唤醒前系统内核将这个线程挂起，停留在mach_msg_trap状态。<br>由另一个线程向内核发送这个端口的msg后，trap状态被唤醒，RunLoop继续工作。<br>RunLoop支持的消息事件(Events)</p>
<p>支持接收处理输入源（Input Source）事件，包括：<br>系统的Mach Port事件，是一种通讯事件<br>自定义输入事件<br>支持接受处理定时源（Timer）事件</p>
<p>在启动RunLoop之前，必须添加监听的输入源事件或者定时源事件，否则调用[runloop run]会直接返回，而不会进入循环让线程长驻。</p>
<p>如果没有添加任何输入源事件或Timer事件，线程会一直在无限循环空转中，会一直占用CPU时间片，没有实现资源的合理分配。<br>没有while循环且没有添加任何输入源或Timer的线程，线程会直接完成，被系统回收。</p>
<p>//错误做法<br>NSRunLoop *runLoop = [NSRunLoop currentRunLoop];<br>while (!self.isCancelled &amp;&amp; !self.isFinished) {<br>    [runLoop runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3]];<br>};</p>
<p>//正确做法<br>NSRunLoop *runLoop = [NSRunLoop currentRunLoop];<br>[runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];<br>while (!self.isCancelled &amp;&amp; !self.isFinished) {<br>    @autoreleasepool {<br>        [runLoop runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3]];<br>    }<br>}<br>Run Loop Modes</p>
<p>#理解<br>Run Loop Mode就是流水线上支持生产的产品类型，流水线在一个时刻只能在一种模式下运行，生产某一类型的产品。消息事件就是订单。</p>
<p>Cocoa定义了如下五种Mode</p>
<p>Default：NSDefaultRunLoopMode，默认模式，在Run Loop没有指定Mode的时候，默认就跑在Default Mode下<br>Connection：NSConnectionRunLoopMode，用来监听处理网络请求NSConnection的事件<br>Modal：NSModalPanelRunLoopMode，OSX的Modal面板事件<br>Event tracking：UITrackingRunLoopMode，拖动事件<br>Common mode：NSRunLoopCommonModes，是一个模式集合，当绑定一个事件源到这个模式集合的时候就相当于绑定到了集合内的每一个模式</p>
<p>RunLoop可以通过[acceptInputForMode:beforeDate:]和[runMode:beforeDate:]来指定在一段时间内的运行模式。如果不指定的话，RunLoop默认会运行在Default下（不断重复调用runMode:NSDefaultRunLoopMode beforDate:）</p>
<p>#在主线程启动一个计时器,拖动UITableView或者UIScrollView，计时器不执行的原因和解决方案<br>在主线程启动一个计时器Timer，然后拖动UITableView或者UIScrollView，计时器不执行。这是因为，为了更好的用户体验，在主线程中Event tracking模式的优先级最高。在用户拖动控件时，主线程的Run Loop是运行在Event tracking Mode下，而创建的Timer是默认关联为Default Mode，因此系统不会立即执行Default Mode下接收的事件。解决方法：</p>
<p>NSTimer * timer = [NSTimer scheduledTimerWithTimeInterval:1.0<br>                                                   target:self<br>                                                 selector:@selector(timerFireMethod:)<br>                                                 userInfo:nil<br>                                                  repeats:YES];</p>
<p>[[NSRunLoop mainRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];<br>//或<br>[[NSRunLoop currentRunLoop] addTimer:timer forMode:UITrackingRunLoopMode];</p>
<p>[timer fire];</p>
<p>#Run Loop应用实践</p>
<p>Run Loop主要有以下三个应用场景：</p>
<p>#1.维护线程的生命周期，让线程不自动退出，isFinished为Yes时退出。<br>NSRunLoop <em>runLoop = [NSRunLoop currentRunLoop];<br>[runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];<br>while (!self.isCancelled &amp;&amp; !self.isFinished) {<br>    @autoreleasepool {<br>            [runLoop runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3]];<br>    }<br>}<br>创建常驻线程，执行一些会一直存在的任务。该线程的生命周期跟App相同<br>@autoreleasepool {<br>        NSRunLoop </em>runLoop = [NSRunLoop currentRunLoop];<br>        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];<br>        [runLoop run];<br>}</p>
<p>#2.在一定时间内监听某种事件，或执行某种任务的线程<br>如下代码，在30分钟内，每隔30s执行onTimerFired:。这种场景一般会出现在，如我需要在应用启动之后，在一定时间内持续更新某项数据。<br>@autoreleasepool {<br>    NSRunLoop <em> runLoop = [NSRunLoop currentRunLoop];<br>    NSTimer </em> udpateTimer = [NSTimer timerWithTimeInterval:30<br>                                                    target:self<br>                                                  selector:@selector(onTimerFired:)<br>                                                  userInfo:nil<br>                                                   repeats:YES];<br>    [runLoop addTimer:udpateTimer forMode:NSRunLoopCommonModes];<br>    [runLoop runUntilDate:[NSDate dateWithTimeIntervalSinceNow:60*30]];<br>}</p>
<p>#3.AFNetworking中RunLoop的创建</p>
<ul>
<li><p>(void)networkRequestThreadEntryPoint:(id)__unused object {<br>  @autoreleasepool {</p>
<pre><code>[[NSThread currentThread] setName:@&quot;AFNetworking&quot;];

NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
 // 这里主要是监听某个 port，目的是让这个 Thread 不会回收
[runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode]; 
[runLoop run];
</code></pre><p>  }<br>}</p>
</li>
<li><p>(NSThread <em>)networkRequestThread {<br>  static NSThread </em>_networkRequestThread = nil;<br>  static dispatch_once_t oncePredicate;<br>  dispatch_once(&amp;oncePredicate, ^{</p>
<pre><code>_networkRequestThread =
[[NSThread alloc] initWithTarget:self
                        selector:@selector(networkRequestThreadEntryPoint:)
                          object:nil];
[_networkRequestThread start];
</code></pre><p>  });<br>  return _networkRequestThread;<br>}</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Debug小宝典]]></title>
      <url>http://lavender1026.github.io/2016/02/20/Debug%E5%B0%8F%E5%AE%9D%E5%85%B8/</url>
      <content type="html"><![CDATA[<h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>崩溃报错有时会直接蹦在UIApplicationMain()或者UIApplicationDelegate()这些初始方法中，而LOG中的报错的原因也仅仅是数组越界问题。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>0.<a href="http://weibo.com/1745945040/CpBv73dSR?type=comment#_rnd1436172574844" target="_blank" rel="external">戴铭</a><br><a href="http://meilbn.com/2015/07/06/iOS-Xcode-Debug-Skills-0x00/#comments" target="_blank" rel="external">Happy Hacking</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS百宝箱]]></title>
      <url>http://lavender1026.github.io/2016/01/17/iOS%E7%99%BE%E5%AE%9D%E7%AE%B1/</url>
      <content type="html"><![CDATA[<h1 id="iOS百宝箱"><a href="#iOS百宝箱" class="headerlink" title="iOS百宝箱"></a>iOS百宝箱</h1><p>自己总结了一下iOS开发中读过的书，用过的软件，开发中常用的框架插件以及github上优质的DEMO</p>
<h3 id="入门视频推荐"><a href="#入门视频推荐" class="headerlink" title="入门视频推荐"></a>入门视频推荐</h3><p>   <a href="http://pan.baidu.com/s/1cHnl2u" target="_blank" rel="external">算法与数据结构</a>密码: bhhi          </p>
<p>   <a href="http://open.163.com/special/opencourse/ios8.html" target="_blank" rel="external">斯坦福大学公开课iOS8全12集</a>  </p>
<p>   <a href="https://itunes.apple.com/cn/course/developing-ios-9-apps-swift/id1104579961" target="_blank" rel="external">斯坦福大学公开课iOS9Swift版</a> 没字幕，白胡子老爷爷的视频，适合英语水平不错的童鞋<br><a id="more"></a></p>
<h2 id="推荐读物"><a href="#推荐读物" class="headerlink" title="推荐读物"></a>推荐读物</h2><p><strong>建议富裕的童鞋还是购买纸质书，支持正版ORZ</strong></p>
<hr>
<table>
<thead>
<tr>
<th>书名</th>
<th>作者</th>
<th>推荐理由</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://pan.baidu.com/s/1hsyKkFM" target="_blank" rel="external">iOS开发进阶</a></td>
<td>唐巧</td>
<td>巧大经典之作，适合入门开发  暗号：t6g7</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1eSI1dmy" target="_blank" rel="external">iOS应用逆向工程</a></td>
<td>沙梓社，吴航</td>
<td>一本从逆向思维着手研究APP的书，很有意思 暗号：r3vb</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1nvOsyFZ" target="_blank" rel="external">iOS应用安全攻防实战</a></td>
<td>Jonathan Zdziarski</td>
<td>掌握iOS应用攻防思路和技巧，了解攻防两端思路，<br>有助于开发者以不变应万变 暗号：4ivs</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1slUVQRb" target="_blank" rel="external">Effective Objective-C 2.0</a></td>
<td>Matt Galloway</td>
<td>适合有一点实战经验的coder补充知识，翻译略有出入 暗号：daar</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1qXPXWGs" target="_blank" rel="external">剑指offer 名企面试官精讲典型编程题</a></td>
<td>何海涛</td>
<td>应届生面试必备，刷题宝典 暗号：gp5a</td>
</tr>
</tbody>
</table>
<h2 id="常用必备软件"><a href="#常用必备软件" class="headerlink" title="常用必备软件"></a>常用必备软件</h2><p><strong>没有链接的均是可以从AppStore下载的</strong></p>
<hr>
<table>
<thead>
<tr>
<th>名称</th>
<th>推荐理由</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a></td>
<td>git桌面化管理工具，免费方便简单实用</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1c2hXvGG" target="_blank" rel="external">Reveal</a></td>
<td>分析View结构层次利器 配合越狱手机更佳 暗号：e96s</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1o8eVgmA" target="_blank" rel="external">snip</a></td>
<td>截图软件 暗号:n8m2</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1mhT3RIC" target="_blank" rel="external">licecap</a></td>
<td>gif动图截图工具 暗号：k3ee</td>
</tr>
<tr>
<td><a href="http://zh.mweb.im/" target="_blank" rel="external">MWeb Lite</a></td>
<td>国人出品 Markdown 写作工具</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1pKE4F1L" target="_blank" rel="external">Flux</a></td>
<td>护眼神器，屏幕暖色调跟随地区时间变化颜色 暗号：t1wq</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1qYvMaQw" target="_blank" rel="external">ShadowsocksX</a></td>
<td>翻墙利器  网速稳定收费合理 暗号：8rkh<br> <a href="http://www.ishadowsocks.net" target="_blank" rel="external">体验账号</a> 6小时换一次密码</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1jI6hA4Y" target="_blank" rel="external">CleanMyMac3</a></td>
<td>清理电脑必备 暗号:87tv（记得把xcode设为白名单）</td>
</tr>
<tr>
<td><a href="http://music.163.com/#/download" target="_blank" rel="external">网易云音乐</a></td>
<td>深夜听歌敲代码，快乐似神仙 (关注<a href="http://music.163.com/#/playlist?id=315962089" target="_blank" rel="external">Dirk丶Chen</a>有惊喜）</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1slxLQep" target="_blank" rel="external">CocoaPods</a></td>
<td>新出的CocoaPods 界面化工具 暗号：njip</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1gf79EdP" target="_blank" rel="external">ALfred2.8</a></td>
<td>十分好用的搜索工具 暗号:4u8q</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1c20oVvy" target="_blank" rel="external">Charles3.11</a></td>
<td>常用抓包工具 暗号：ysyw</td>
</tr>
<tr>
<td><a href="http://pan.baidu.com/s/1miKXuGw" target="_blank" rel="external">Sketch3.8</a></td>
<td>UI制作利器 暗号：h9qh</td>
</tr>
<tr>
<td>Xmind</td>
<td>制作思维导图神器 </td>
</tr>
<tr>
<td>dash</td>
<td>看官方文档必备工具，方便快捷<a href="http://pan.baidu.com/s/1c2z8pWk" target="_blank" rel="external">官方文档</a>暗号：2t8w</td>
</tr>
</tbody>
</table>
<h2 id="常用第三方框架"><a href="#常用第三方框架" class="headerlink" title="常用第三方框架"></a>常用第三方框架</h2><table>
<thead>
<tr>
<th>名称</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>AFNetworking</td>
<td>网络必备</td>
</tr>
<tr>
<td>Masonry</td>
<td>Autolayout手写库TOP1，没有之一</td>
</tr>
<tr>
<td>SnapKit</td>
<td>Autolayout手写库Swift版</td>
</tr>
<tr>
<td>YYkit系列</td>
<td>包含YYImage YYModel YYCache 等一堆超级好用的框架 。强烈推荐给大家</td>
</tr>
<tr>
<td>SDWebImage</td>
<td>图片异步下载以及缓存管理</td>
</tr>
<tr>
<td>MBProgressHUD</td>
<td>常用HUD组件</td>
</tr>
<tr>
<td>SVProgressHUD</td>
<td>常用HUD组件，个人推荐</td>
</tr>
<tr>
<td>MJRefresh</td>
<td>好用的下拉刷新 十分好用</td>
</tr>
<tr>
<td>JSPatch</td>
<td>为项目动态添加模块，或替换项目原生代码动态修复 bug</td>
</tr>
<tr>
<td><a href="https://realm.io/" target="_blank" rel="external">Realm</a></td>
<td>十分强大的一个数据库</td>
</tr>
<tr>
<td>ReactiveCocoa</td>
<td>大名鼎鼎的RAC 目前还没接触到，但是很流弊</td>
</tr>
</tbody>
</table>
<h2 id="常用Xcode插件"><a href="#常用Xcode插件" class="headerlink" title="常用Xcode插件"></a>常用Xcode插件</h2><p>建议先从github上下载Alcatraz安装，然后从Alcatraz中安装其他插件</p>
<hr>
<table>
<thead>
<tr>
<th>名称</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="external">Alcatraz</a></td>
<td>xcode插件管理工具</td>
</tr>
<tr>
<td>CocoaPods</td>
<td>第三方框架管理工具</td>
</tr>
<tr>
<td>Backlight</td>
<td>当前编辑代码行显示高亮可自定义颜色</td>
</tr>
<tr>
<td>BBUDebuggerTuckAway</td>
<td>当编辑代码时自动隐藏bug栏简单实用</td>
</tr>
<tr>
<td>FuzzyAutocomplete</td>
<td>智能模糊联想函数方法名称</td>
</tr>
<tr>
<td>KSImageNamed</td>
<td>图片名称自动填写显示对应图片，方便快捷</td>
</tr>
<tr>
<td>VVDocumenter</td>
<td>不多说，喵神大作。帮助你快速编写符合规范的注释</td>
</tr>
<tr>
<td>XAlign</td>
<td>很好用的格式自动对齐插件</td>
</tr>
<tr>
<td>Peckham</td>
<td>超好用的头文件便捷引用 不用返回头文件填加 快捷键cmd+contro+p （仅支持OC）</td>
</tr>
<tr>
<td>HOStringSense</td>
<td>显示字符串长短，即时颜色</td>
</tr>
</tbody>
</table>
<h2 id="优质DEMO"><a href="#优质DEMO" class="headerlink" title="优质DEMO"></a>优质DEMO</h2><table>
<thead>
<tr>
<th>名称</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/mogujie/TeamTalk" target="_blank" rel="external">TeamTalk</a></td>
<td>蘑菇街. 开源IM. 电商强烈推荐.</td>
</tr>
<tr>
<td><a href="https://github.com/meilbn/MyOne-iOS" target="_blank" rel="external">MyOne-iOS</a></td>
<td>用OC写的《一个》 iOS 客户端</td>
</tr>
<tr>
<td><a href="https://github.com/jiachenmu/Swift-BanTang" target="_blank" rel="external">IOS-Swift2.0</a></td>
<td>高仿半糖App </td>
</tr>
<tr>
<td><a href="https://github.com/lookingstars/meituan" target="_blank" rel="external">高仿美团iOS</a></td>
<td>高仿美团</td>
</tr>
<tr>
<td><a href="https://github.com/CatchChat/Yep" target="_blank" rel="external">Yep.swift</a></td>
<td>Yep 一个由天才开发给天才们使用的社交软件。</td>
</tr>
<tr>
<td><a href="https://github.com/renzifeng/ZFPlayer" target="_blank" rel="external">ZFPlayer</a></td>
<td>基于AVPlayer，支持横屏、竖屏，上下滑动调节音量、屏幕亮度，左右滑动调节播放进度</td>
</tr>
<tr>
<td><a href="https://github.com/ZhongTaoTian/LoveFreshBeen" target="_blank" rel="external">高仿爱鲜蜂</a></td>
<td>高仿爱鲜蜂 - Swift2.0</td>
</tr>
<tr>
<td><a href="https://github.com/callmejoejoe/XCFApp" target="_blank" rel="external">高仿下厨房</a></td>
<td>高仿下厨房</td>
</tr>
<tr>
<td><a href="https://github.com/singer1026/DMHeartFlyAnimation" target="_blank" rel="external">直播APP点赞</a></td>
<td>直播app点赞功能</td>
</tr>
</tbody>
</table>
<p><a href="https://github.com/jiecao-fm/SwiftTheme" target="_blank" rel="external">主题换肤</a></p>
<h2 id="优质学习链接"><a href="#优质学习链接" class="headerlink" title="优质学习链接"></a>优质学习链接</h2><table>
<thead>
<tr>
<th>名称</th>
<th>推荐理由</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ChenYilong/iOSInterviewQuestions" target="_blank" rel="external">iOS面试题集锦</a></td>
<td>共有55道题，题目都是质量很高的面试题</td>
</tr>
<tr>
<td><a href="http://lib.csdn.net/base/31?source=blogtop" target="_blank" rel="external">CSDN算法与数据结构知识库</a></td>
<td>自学算法和数据结构，知识面涵盖广泛</td>
</tr>
<tr>
<td><a href="http://coolshell.cn/articles/5426.html?plg_nld=1&amp;plg_uin=1&amp;plg_auth=1&amp;plg_nld=1&amp;plg_usr=1&amp;plg_vkey=1&amp;plg_dev=1" target="_blank" rel="external">VIM练级攻略</a></td>
<td>自学VIM简明教程</td>
</tr>
</tbody>
</table>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode小Tips]]></title>
      <url>http://lavender1026.github.io/2015/10/25/%E5%B0%8FTips/</url>
      <content type="html"><![CDATA[<p>整理一下自己开发过程中用到的小技巧小tips</p>
<p>1，打印View所有子视图</p>
<blockquote>
<p>po [[self view]recursiveDescription]</p>
</blockquote>
<p>2，layoutSubviews调用的调用时机</p>
<ul>
<li>当视图第一次显示的时候会被调用</li>
<li>当这个视图显示到屏幕上了,点击按钮</li>
<li>添加子视图也会调用这个方法</li>
<li>当本视图的大小发生改变的时候是会调用的</li>
<li>当子视图的frame发生改变的时候是会调用的</li>
<li>当删除子视图的时候是会调用的<a id="more"></a>
</li>
</ul>
<p>3，NSString过滤特殊字符<br>// 定义一个特殊字符的集合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSCharacterSet *set = [NSCharacterSet characterSetWithCharactersInString:</span><br><span class="line">@&quot;@／：；（）¥「」＂、[]&#123;&#125;#%-*+=_\\|~＜＞$€^•&apos;@#$%^&amp;*()_+&apos;\&quot;&quot;];</span><br></pre></td></tr></table></figure>
<p>// 过滤字符串的特殊字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *newString = [trimString stringByTrimmingCharactersInSet:set];</span><br></pre></td></tr></table></figure>
<p>4，TransForm属性<br>//平移按钮</p>
<blockquote>
<p>CGAffineTransform transForm = self.buttonView.transform;<br>self.buttonView.transform = CGAffineTransformTranslate(transForm, 10, 0);</p>
</blockquote>
<p>//旋转按钮</p>
<blockquote>
<p>CGAffineTransform transForm = self.buttonView.transform;<br>self.buttonView.transform = CGAffineTransformRotate(transForm, M_PI_4);</p>
</blockquote>
<p>//缩放按钮</p>
<blockquote>
<p>self.buttonView.transform = CGAffineTransformScale(transForm, 1.2, 1.2);</p>
</blockquote>
<p>//初始化复位</p>
<blockquote>
<p>self.buttonView.transform = CGAffineTransformIdentity;</p>
</blockquote>
<p>5，去掉分割线多余15像素<br>首先在viewDidLoad方法加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> if ([self.tableView respondsToSelector:@selector(setSeparatorInset:)]) &#123;</span><br><span class="line">        [self.tableView setSeparatorInset:UIEdgeInsetsZero];    </span><br><span class="line">&#125;   </span><br><span class="line"> if ([self.tableView respondsToSelector:@selector(setLayoutMargins:)]) &#123;        </span><br><span class="line">        [self.tableView setLayoutMargins:UIEdgeInsetsZero];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在重写willDisplayCell方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell </span><br><span class="line">forRowAtIndexPath:(NSIndexPath *)indexPath&#123;   </span><br><span class="line">    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) &#123;       </span><br><span class="line">             [cell setSeparatorInset:UIEdgeInsetsZero];    </span><br><span class="line">    &#125;    </span><br><span class="line">    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) &#123;        </span><br><span class="line">             [cell setLayoutMargins:UIEdgeInsetsZero];    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6，计算方法耗时时间间隔<br>// 获取时间间隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define TICK   CFAbsoluteTime start = CFAbsoluteTimeGetCurrent();</span><br><span class="line">#define TOCK   NSLog(@&quot;Time: %f&quot;, CFAbsoluteTimeGetCurrent() - start)</span><br></pre></td></tr></table></figure>
<p>7，Color颜色宏定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 随机颜色</span><br><span class="line">#define RANDOM_COLOR [UIColor colorWithRed:arc4random_uniform(256) / 255.0 green:arc4random_uniform(256) / 255.0 blue:arc4random_uniform(256) / 255.0 alpha:1]</span><br><span class="line">// 颜色(RGB)</span><br><span class="line">#define RGBCOLOR(r, g, b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:</span><br><span class="line">(b)/255.0f alpha:1]</span><br><span class="line">// 利用这种方法设置颜色和透明值，可不影响子视图背景色</span><br><span class="line">#define RGBACOLOR(r, g, b, a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]</span><br></pre></td></tr></table></figure>
<p>8，Alert提示宏定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define Alert(_S_, ...) [[[UIAlertView alloc] initWithTitle:@&quot;提示&quot; message:[NSString stringWithFormat:(_S_), ##__VA_ARGS__] delegate:nil cancelButtonTitle:@&quot;确定&quot; otherButtonTitles:nil] show]</span><br></pre></td></tr></table></figure>
<p>9，让 iOS 应用直接退出</p>
<pre><code>- (void)exitApplication {
AppDelegate *app = [UIApplication sharedApplication].delegate;
UIWindow *window = app.window;

[UIView animateWithDuration:1.0f animations:^{
    window.alpha = 0;
} completion:^(BOOL finished) {
    exit(0);
}];}
</code></pre><p>10，NSArray 快速求总和 最大值 最小值 和 平均值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = [NSArray arrayWithObjects:@&quot;2.0&quot;, @&quot;2.3&quot;, @&quot;3.0&quot;, @&quot;4.0&quot;, @&quot;10&quot;, nil];</span><br><span class="line">CGFloat sum = [[array valueForKeyPath:@&quot;@sum.floatValue&quot;] floatValue];</span><br><span class="line">CGFloat avg = [[array valueForKeyPath:@&quot;@avg.floatValue&quot;] floatValue];</span><br><span class="line">CGFloat max =[[array valueForKeyPath:@&quot;@max.floatValue&quot;] floatValue];</span><br><span class="line">CGFloat min =[[array valueForKeyPath:@&quot;@min.floatValue&quot;] floatValue];</span><br><span class="line">NSLog(@&quot;%f\n%f\n%f\n%f&quot;,sum,avg,max,min);</span><br></pre></td></tr></table></figure>
<p>11，修改Label中不同文字颜色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</span><br><span class="line">&#123;</span><br><span class="line">    [self editStringColor:self.label.text editStr:@&quot;好&quot; color:[UIColor blueColor]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)editStringColor:(NSString *)string editStr:(NSString *)editStr color:(UIColor *)color &#123;</span><br><span class="line">    // string为整体字符串, editStr为需要修改的字符串</span><br><span class="line">    NSRange range = [string rangeOfString:editStr];</span><br><span class="line">	 NSMutableAttributedString *attribute = [[NSMutableAttributedString alloc] initWithString:string];</span><br><span class="line"></span><br><span class="line">    // 设置属性修改字体颜色UIColor与大小UIFont</span><br><span class="line">    [attribute addAttributes:@&#123;NSForegroundColorAttributeName:color&#125; range:range];</span><br><span class="line"></span><br><span class="line">    self.label.attributedText = attribute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12，播放声音</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#import&lt;AVFoundation/AVFoundation.h&gt;</span><br><span class="line">//  1.获取音效资源的路径</span><br><span class="line">   NSString *path = [[NSBundle mainBundle]pathForResource:@&quot;pour_milk&quot; ofType:@&quot;wav&quot;];</span><br><span class="line">   //  2.将路劲转化为url</span><br><span class="line">   NSURL *tempUrl = [NSURL fileURLWithPath:path];</span><br><span class="line">   //  3.用转化成的url创建一个播放器</span><br><span class="line">   NSError *error = nil;</span><br><span class="line">   AVAudioPlayer *play = [[AVAudioPlayer alloc]initWithContentsOfURL:tempUrl error:&amp;error];</span><br><span class="line">   self.player = play;</span><br><span class="line">   //  4.播放</span><br><span class="line">   [play play];</span><br></pre></td></tr></table></figure>
<p>13，检测是否IPad Pro</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)isIpadPro</span><br><span class="line">&#123;   </span><br><span class="line">  UIScreen *Screen = [UIScreen mainScreen];   </span><br><span class="line">  CGFloat width = Screen.nativeBounds.size.width/Screen.nativeScale;  </span><br><span class="line">  CGFloat height = Screen.nativeBounds.size.height/Screen.nativeScale;         </span><br><span class="line">  BOOL isIpad =[[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad;   </span><br><span class="line">  BOOL hasIPadProWidth = fabs(width - 1024.f) &lt; DBL_EPSILON;    </span><br><span class="line">  BOOL hasIPadProHeight = fabs(height - 1366.f) &lt; DBL_EPSILON;  </span><br><span class="line">  return isIpad &amp;&amp; hasIPadProHeight &amp;&amp; hasIPadProWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14，修改Tabbar Item的属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 修改标题位置</span><br><span class="line">  self.tabBarItem.titlePositionAdjustment = UIOffsetMake(0, -10);</span><br><span class="line"> // 修改图片位置</span><br><span class="line">  self.tabBarItem.imageInsets = UIEdgeInsetsMake(-3, 0, 3, 0);</span><br><span class="line"></span><br><span class="line"> // 批量修改属性</span><br><span class="line">  for (UIBarItem *item in self.tabBarController.tabBar.items) &#123;</span><br><span class="line">      [item setTitleTextAttributes:[NSDictionary dictionaryWithObjectsAndKeys:</span><br><span class="line">               [UIFont fontWithName:@&quot;Helvetica&quot; size:19.0], NSFontAttributeName, nil]</span><br><span class="line">                          forState:UIControlStateNormal];</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 设置选中和未选中字体颜色</span><br><span class="line"> [[UITabBar appearance] setShadowImage:[[UIImage alloc] init]];</span><br><span class="line"></span><br><span class="line"> //未选中字体颜色</span><br><span class="line"> [[UITabBarItem appearance] setTitleTextAttributes:@&#123;NSForegroundColorAttributeName:[UIColor greenColor]&#125; forState:UIControlStateNormal];</span><br><span class="line"></span><br><span class="line"> //选中字体颜色</span><br><span class="line"> [[UITabBarItem appearance] setTitleTextAttributes:@&#123;NSForegroundColorAttributeName:[UIColor cyanColor]&#125; forState:UIControlStateSelected];</span><br></pre></td></tr></table></figure>
<p>15，NULL - nil - Nil - NSNULL的区别</p>
<ul>
<li><p>nil是OC的，空对象，地址指向空（0）的对象。对象的字面零值</p>
</li>
<li><p>Nil是Objective-C类的字面零值</p>
</li>
<li><p>NULL是C的，空地址，地址的数值是0，是个长整数</p>
</li>
<li><p>NSNull用于解决向NSArray和NSDictionary等集合中添加空值的问题</p>
</li>
</ul>
<p>16，去掉BackBarButtonItem的文字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(0, -60)forBarMetrics:UIBarMetricsDefault];</span><br></pre></td></tr></table></figure>
<p>17，控件不能交互的一些原因</p>
<blockquote>
<p>1，控件的userInteractionEnabled = NO<br>2，透明度小于等于0.01，aplpha<br>3，控件被隐藏的时候，hidden = YES<br>4，子视图的位置超出了父视图的有效范围，子视图无法交互，设置了。<br>5，需要交互的视图，被其他视图盖住（其他视图开启了用户交互）。</p>
</blockquote>
<p>18，修改UITextField中Placeholder的文字颜色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[text setValue:[UIColor redColor] forKeyPath:@&quot;_placeholderLabel.textColor&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19，视图的生命周期<br> 1、 alloc 创建对象，分配空间<br> 2、 init (initWithNibName) 初始化对象，初始化数据<br> 3、 loadView 从nib载入视图 ，除非你没有使用xib文件创建视图<br> 4、 viewDidLoad 载入完成，可以进行自定义数据以及动态创建其他控件<br> 5、 viewWillAppear视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了<br> 6、 viewDidAppear 视图已在屏幕上渲染完成</p>
<p> 1、viewWillDisappear 视图将被从屏幕上移除之前执行<br> 2、viewDidDisappear 视图已经被从屏幕上移除，用户看不到这个视图了<br> 3、dealloc 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放.</p>
<p> viewVillUnload－ 当内存过低，即将释放时调用；<br> viewDidUnload－当内存过低，释放一些不需要的视图时调用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分类与EXtension的前世今生]]></title>
      <url>http://lavender1026.github.io/2015/07/17/%E5%88%86%E7%B1%BB%E4%B8%8EEXtension%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      <content type="html"><![CDATA[<p>category &amp; extension</p>
<p>苹果推荐分类的使用<br>    •    给已经存在的类添加方法<br>    •    把类的实现分开在几个不同文件中<br>    ◦    减少单个文件的体积<br>    ◦    把不同功能组织到不同的category里<br>    ◦    多个开发者共同完成一个类<br>    ◦    按照需求加载想要的category<br>    •    3.声明私有方法<br>除此之外，我们还可以转换思想，将category使用到如下地方：<br>    •    4.模仿多继承<br>    •    5.把framework的私有方法分开<br>    <a id="more"></a></p>
<p>category和extension区别1<br>    •    category: 类别，分类<br>    ◦    专门用来给类添加新的方法<br>    ◦    不能给类添加成员属性，添加了成员变量，也无法取到<br>    ▪    注意：其实可以通过runtime给分类添加属性<br>    ◦    分类中用@property定义变量，只会生成变量的getter，setter方法的声明，不能生成方法实现和带下划线的成员变量。<br>    •    extension：类扩展<br>    ◦    可以说成是特殊的分类，也称作匿名分类<br>    ◦    可以给类添加成员属性，但是是私有变量<br>    ◦    可以给类添加方法，也是私有方法<br>category和extension区别2<br>虽然有人说extension是一个特殊的category，也有人将extension叫做匿名分类，但是其实两者差别很大。<br>    •    extension<br>    ◦    在编译器决议，是类的一部分，在编译器和头文件的@interface和实现文件里的@implement一起形成了一个完整的类。<br>    ◦    伴随着类的产生而产生，也随着类的消失而消失。<br>    ◦    extension一般用来隐藏类的私有消息，你必须有一个类的源码才能添加一个类的extension，所以对于系统一些类，如nsstring，就无法添加类扩展<br>    •    category<br>    ◦    是运行期决议的<br>    ◦    类扩展可以添加实例变量，分类不能添加实例变量<br>    ◦    原因：因为在运行期，对象的内存布局已经确定，如果添加实例变量会破坏类的内部布局，这对编译性语言是灾难性的。<br>category底层结构<br>我们知道，所有OC类和对象，在runtime层都是用struct表示的，category在runtime层使用结构体category_t定义的，包含了如下：<br>    •    name 类名<br>    •    cls 类<br>    •    instanceMethods 对象方法<br>    •    classMethods 类方法<br>    •    protocols 协议列表<br>    •    instanceProperties 添加的所有属性<br>category加载<br>在runtime，系统会将包含的内容添加如下：<br>    •    把category的实力方法，协议，已经属性添加到类上<br>    •    把类方法和协议添加到metaclass<br>分类加载和方法调用顺序<br>    •    加载：先加载原类的+load方法，再加载分类的+load方法，若多个分类，则根据编译顺序加载<br>    •    调用：先调用分类的方法，再调用原类的方法，分类方法会覆盖原类的方法<br>分类覆盖类的方法<br>如果分类中的方法与类的方法同名，则将会覆盖类的方法，实现原理：分类的对象方法会添加到类的方法列表中，分类的方法会添加到类的相应方法列表中（对象方法添加到类的方法列表，类方法会添加到metaclass列表），而且排列顺序会与原类的同名方法排在一起，且在原类的同名方法的前面。方法调用时会根据顺序先找到第一同名方法就调用，因此会覆盖原类的同名方法。<br>分类中添加成员属性<br>在runtime层面可以通过关联对象为分类添加成员属性</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[地图定位CoreLocation框架的使用(2)]]></title>
      <url>http://lavender1026.github.io/2015/07/12/%E5%9C%B0%E5%9B%BE%E5%AE%9A%E4%BD%8DCoreLocation%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8(2)/</url>
      <content type="html"><![CDATA[<h1 id="CoreLocation框架"><a href="#CoreLocation框架" class="headerlink" title="CoreLocation框架"></a>CoreLocation框架</h1><p>#四. CLLocation对象详解 </p>
<p>#1. 属性解释</p>
<pre><code>    &gt; coordinate
&gt; altitude
&gt; speed
&gt; course
</code></pre><p>#2. 重要方法<br>: 当前位置所在的经纬度数据<br>: 海拔<br>: 当前速度<br>: 航向(设备移动的方向, 值域范围:0.0 ~ 259.9, 正北方向为0.0)<br>代码: - (CLLocationDistance)distanceFromLocation:(CLLocation *)location 作用: 计算两个位置对象之间的物理距离, 单位是(米)<br><a id="more"></a></p>
<p>#3. 场景演练</p>
<ol>
<li>场景演示:打印当前用户的行走方向,偏离角度以及对应的行走距离, 例如:”北偏东30度方向,移动了8米”</li>
<li>实现步骤:<br>1&gt; 获取对应的方向偏向(例如”正东”,”东偏南”) 2&gt; 获取对应的偏离角度(并判断是否是正方向) 3&gt; 计算行走距离<br>4&gt; 打印信息<br>#4. 注意事项<br>使用位置前, 务必判断当前获取的位置是否有效<br>代码: if (location.horizontalAccuracy &lt; 0) return;<br>功能: 如果水平精确度小于零, 代表虽然可以获取位置对象, 但是数据错误, 不可用<br>#五、经验小结<br>#一. 定位的应用场景<br>1) 导航<br>2) 电商APP,获取用户所在城市(需要与(反)地理编码联合使用) 3) 数据采集用户信息(例如,统计app使用分布)<br>4) 查找周边(周边好友, 周边商家等等)<br>Chapter-19(II)地图定位CoreLocation框架 142<br>MISSAJJ IOSDevelopment GitBook<h1 id="二-开发经验"><a href="#二-开发经验" class="headerlink" title="二. 开发经验"></a>二. 开发经验</h1>#1. 由于定位非常耗电; 所以为了给用户省电, 你可以遵守以下小经验<br>1)不需要获取用户位置时,一定要关闭定位服务: 2)如果能满足项目需求,尽可能的使用”监听显著位置变化”的定位服务(打车app) 3)如果可以,尽可能使用低精度的desiredAccuracy 4)如果是数据采集,(一般都是周期性的去轮询用户位置),在轮询期间一定要关闭定位<br>五. 指南针效果实现 1. 实现思路<br>利用”磁力计”传感器,获取设备朝向 根据设备朝向反向旋转”指南针”图片<br>#2. 代码实现<br>获取设备朝向<br>1) 导入CoreLocation框架以及对应的主头文件 #import <corelocation corelocation.h=""><br>2) 创建CLLocationManager对象并设置代理<br>self.locationM = [[CLLocationManager alloc] init]; self.locationM.delegate = self;<br>3) 调用方法, 开始获取设备朝向<br>[self.locationM startUpdatingHeading];<br>4) 在对应的代理方法中获取设备朝向信息 -(void)locationManager:(CLLocationManager <em>)manager didUpdateHeadi<br>{<br>// 旋转图片代码<br>} 旋转图片<br>// 1.判断当前的角度是否有效(如果此值小于0,代表角度无效) if(newHeading.headingAccuracy &lt; 0)<br>return;<br>// 2.获取当前设备朝向(磁北方向)<br>CGFloat angle = newHeading.magneticHeading;<br>// 3.转换成为弧度<br>CGFloat radian = angle / 180.0 </em> M_PI;<br>// 4.带动画反向旋转指南针<br>[UIView animateWithDuration:0.5 animations:^{<pre><code>    self.compassView.transform = CGAffineTransformMakeRotation(-radian
}];
</code></pre>)</corelocation></li>
<li>概念补充<br>磁北角度: newHeading.magneticHeading 真北角度: newHeading.trueHeading</li>
<li>注意事项<br>——- 相对于”磁北方向”产生的角度 ——- 相对于”真北方向”产生的角度</li>
<li>获取设备朝向前, 先判断”磁力计”是否可用 [CLLocationManager headingAvailable];</li>
<li>获取朝向前, 判断当前朝向信息是否有效 if(newHeading.headingAccuracy &lt; 0) return;</li>
<li>注意与”航向”的区别<br>设备朝向是指手机的朝向; “航向”可以理解为设备的移动方向</li>
<li>使用”磁力计”传感器获取设备朝向, 不需要请求用户授权 因为设备朝向不涉及用户隐私<br>5.测试环境</li>
<li>XCode版本无要求(建议:XCode7.0不需要开发者账号也可以进行真机调试) 2. 必须要求真机设备(只有真机设备才有”磁力计”传感器)<br>六. 区域监听 1.概念解释<br>区 域 : 就是指划定的一块地域范围(比如圆形区域, 则由区域中心, 和半径组成)<br>区域监听 : 是指,我们通过代码指定一个区域, 然后当用户持握设备进入或者离开指定区域, 我们<br>#2. 监听指定区域<br>导入CoreLocation框架以及对应的主头文件 <corelocation corelocation.h=""><br>创建CLLocationManager对象并设置代理<pre><code>self.locationM = [[CLLocationManager alloc] init];
self.locationM.delegate = self;
</code></pre>请求前后台定位, 或前台定位授权, 并在Info.Plist文件中配置相应的Key<pre><code>[self.locationM requestAlwaysAuthorization];
// [self.locationM requestWhenInUseAuthorization];
</code></pre>创建一个区域, 并开始监听<br>// 1. 判断区域监听服务是否可用(定位服务是否关闭, 定位是否授权, 是否开启飞行模式) if ([CLLocationManager isMonitoringAvailableForClass:[CLCircularRegion {<br>// 创建区域中心<br>CLLocationCoordinate2D center = CLLocationCoordinate2DMake(29.1234<br>// 创建区域(指定区域中心,和区域半径) CLLocationDistance radius = 1000;<br>// 判断区域半径是否大于最大监听区域半径,如果大于, 就没法监听<br>if (radius &gt; self.locationM.maximumRegionMonitoringDistance) {<pre><code>    radius = self.locationM.maximumRegionMonitoringDistance;
}
CLCircularRegion *region = [[CLCircularRegion alloc] initWithCente
</code></pre>// 开始监听指定区域<pre><code>    [self.locationM startMonitoringForRegion:region];
}
</code></pre>else<br>{<br>NSLog(@”区域监听不可用”);<br>}<br>在对应的代理方法中监听区域状态<br>// 进去监听区域后调用(调用一次)<br>-(void)locationManager:(nonnull CLLocationManager <em>)manager didEnterRe<br>{<br>NSLog(@”进入区域—%@”, region.identifier); [manager stopMonitoringForRegion:region];<br>}<br>// 离开监听区域后调用(调用一次)<br>-(void)locationManager:(nonnull CLLocationManager </em>)manager didExitReg<br>{<br>NSLog(@”离开区域—%@”, region.identifier);<br>}<br>#3. 获取某个区域的当前状态<br>监听某个区域时, 只有进入或者离开这个区域时, 才能回调对应的方法, 是一个进入或者离开的 动作 如果想知道某一个区域的当前状态(识别用户是在区域内部, 还是区域外部), 则需要使用以 下方法<br>代 码:<br>[self.locationM requestStateForRegion:region];<br>回调代理:<br>// 请求某个区域状态时, 回调的代理方法 -(void)locationManager:(CLLocationManager *)manager didDetermineState:(CL<br>{<br> switch (state) {<br>case CLRegionStateUnknown: NSLog(@”未知状态”); break;<br>case CLRegionStateInside: NSLog(@”在区域内部”);<br>Chapter-19(II)地图定位CoreLocation框架 145<br>5<br>r<br>g<br>i<br>R<br>MISSAJJ IOSDevelopment GitBook<pre><code>     break;
case CLRegionStateOutside:
</code></pre>NSLog(@”在区域外部”);<pre><code>    break;
default:
</code></pre>break; }<br>}<br>#4. 测试环境<br>XCode版本无要求 iOS模拟器版本无要求 5. 注意事项</corelocation></li>
<li>想要做区域监听, 在iOS8.0之后, 必须请求位置授权<br>代码: [self.locationM requestAlwaysAuthorization];<br>原因: 区域监听的原理就是获取用户的位置, 然后在判断该位置是否在制定区域内, 所以会涉及到用</li>
<li>使用前, 先判断区域监听是否可用<br>代码: [CLLocationManager isMonitoringAvailableForClass:[CLCircularRegion c</li>
<li>注意区域半径是否大于最大区域监听半径(如果大于, 则无法监听成功)<br>代码: radius &gt; self.locationM.maximumRegionMonitoringDistance<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1></li>
<li>区域监听, 测试没有效果?<br>首先, 确定代码没有问题, 是否有请求授权;<br>其次, 尝试修改模拟器位置信息, 触发进入区域或离开区域的动作<br>第三, 如果模拟器出现BUG, 定位不到, 也会无法判定当前区域状态; 所以, 最后可以尝试重置模<br>#地理编码<br>#1. 概念解释<br>地理编码: 是指根据地址关键字, 将其转换成为对应的经纬度等信息; 发地理编码: 是指根据经纬度信息, 将其转换成为对应的省市区街道等信息;<br>#2. 地理编码<br>导入CoreLocation框架以及对应的主头文件 #import <corelocation corelocation.h=""><br>创建CLGeocoder对象<br>self.geoC = [[CLGeocoder alloc] init];<br>根据地址关键字, 进行地理编码<br>// 直接根据地址进行地理编码(返回结果可能有多个,因为一个地点有重名)<br> Chapter-19(II)地图定位CoreLocation框架 146<br>拟<br>MISSAJJ IOSDevelopment GitBook<br>[self.geoC geocodeAddressString:@”广州” completionHandler:^(NSArray&lt;CL<br>{<br>// 包含区,街道等信息的地标对象<br>CLPlacemark <em>placemark = [placemarks firstObject]; // 城市名称<br>NSString </em>city = placemark.locality;<br>// 街道名称<br>NSString <em>street = placemark.thoroughfare;<br>// 全称<br>NSString </em>name = placemark.name;<br>}]; </corelocation></li>
<li>反地理编码<br>导入CoreLocation框架以及对应的主头文件<corelocation corelocation.h=""><br>创建CLGeocoder对象<br>self.geoC = [[CLGeocoder alloc] init];<br>根据经纬度信息, 进行反地理编码<br>// 根据经纬度信息进行反地理编码<br>[self.geoC reverseGeocodeLocation:[[CLLocation alloc] initWithLatitude<br>{<br>// 包含区,街道等信息的地标对象<br>CLPlacemark <em>placemark = [placemarks firstObject]; // 城市名称<br>NSString </em>city = placemark.locality;<br>// 街道名称<br>NSString <em>street = placemark.thoroughfare;<br>// 全称<br>NSString </em>name = placemark.name;<br>}];</corelocation></li>
<li>CLPlacemark 地标对象详解<br>location : CLLocation 类型, 位置对象信息, 里面包含经纬度, 海拔等等 region : CLRegion 类型, 地标对象对应的区域<br>addressDictionary : NSDictionary 类型, 存放街道,省市等信息<br>: NSString 类型, 地址全称 : NSString 类型, 街道名称 : NSString 类型, 城市名称<br>name<br>thoroughfare<br>locality<br>administrativeArea : NSString 类型, 省名称 country : NSString 类型, 国家名称<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境```"></a>测试环境```</h1>必须联网 XCode版本不限 iOS模拟器系统版本不限 ```<h1 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h1>测试无数据?<br>首先, 检查是否有联网;<br>其次, 如果是反地理编码,可尝试更换经纬度再次尝试, 有的经纬度没有对应信息<br>#1. 应用场景<br>一般与定位结合使用, 确定当前位置的具体地理信息<br>八. 使用第三方框架进行定位<br>#1. 主要原因<br>因为使用CoreLocation框架进行获取用户位置信息, 是通过代理进行回调; 而第三方框架<br>#2. 框架信息<br>名称: locationManager<br>地址: <a href="https://github.com/intuit/LocationManager" target="_blank" rel="external">link</a><br>#3. 使用方法 参照该框架对应的 readME<br>#4. 注意事项<br>一般集成第三方框架到项目中, 请先确保该框架没有问题, 然后再向项目中集成</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[地图定位CoreLocation框架的使用(1)]]></title>
      <url>http://lavender1026.github.io/2015/07/11/%E5%9C%B0%E5%9B%BE%E5%AE%9A%E4%BD%8DCoreLocation%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8(1)/</url>
      <content type="html"><![CDATA[<h1 id="CoreLocation框架"><a href="#CoreLocation框架" class="headerlink" title="CoreLocation框架"></a>CoreLocation框架</h1><h1 id="一-IOS8-0之前的定位"><a href="#一-IOS8-0之前的定位" class="headerlink" title="一:IOS8.0之前的定位"></a>一:IOS8.0之前的定位</h1><p>#1. 前台定位<br>导入CoreLocation框架以及对应的主头文件 <corelocation corelocation.h=""><br>创建CLLocationManager对象并设置代理<br>       self.locationM = [[CLLocationManager alloc] init];<br>       self.locationM.delegate = self;<br>调用方法,开始更新用户位置信息<br>[self.locationM startUpdatingLocation];<br>  在对应的代理方法中获取位置信息<br>       -(void)locationManager:(nonnull CLLocationManager *)manager didUpdateL<br>{<br>NSLog(@”每当请求到位置信息时, 都会调用此方法”);<br>}<br><a id="more"></a></corelocation></p>
<p>#2. 后台定位<br>在前台定位基础上, 勾选后台模式Location updates image</p>
<p>#3. 额外设置</p>
<p>每隔多少米定位一次<br>代码: self.locationM.distanceFilter = 100;<br>功能: 只有当最新的位置与上一次获取的位置之间的距离, 大于这个值时, 才会通过代理告诉外界<br>设置定位精确度<br>代 码: self.locationM.desiredAccuracy = kCLLocationAccuracyBest; 功 能: 通过设置此属性, 获取不同精确度的位置信息<br>注意事项: 精确度越高,越耗电,定位所需时间越长<br>枚举注解:<br>  枚举值 kCLLocationAccuracyBestForNavigation<br>kCLLocationAccuracyBest kCLLocationAccuracyNearestTenMeters kCLLocationAccuracyHundredMeters kCLLocationAccuracyKilometer kCLLocationAccuracyThreeKilometers</p>
<ol>
<li>知识补充<br>含义<br>最适合导航<br>精度最好的<br>附近10米 附近100米 附近1000米 附近3000米</li>
<li>定位常识<br>1) 标准定位服务(基于gps/基站/wifi定位, 具体使用哪种,苹果有自己规则)<blockquote>
<p>程序关闭,就没法获取位置<br>2) 显著的位置变化定位服务(使用基站进行定位,所以必须要求设备有电话模块)<br>当app被完全关闭时,也可以接收到位置通知,并让app进入到后台处理<br>定位精度相比于上面,精度不大,所以耗电小,而且定位更新频率依据基站密度而定</p>
</blockquote>
</li>
<li>应用场景<br>1) 如果要求定位及时,精度较高,并且运行时间较短,可使用标准定位;<br>2) 如果长时间监控用户位置,用户移动速度比较快(例如打车软件),可使用后者<br>#4. 测试环境:</li>
<li>XCode7.0之前版本,例如XCode6.4版本 2. 模拟器选择iOS8.0之前的版本</li>
</ol>
<ul>
<li>原因 : XCode7.0(包含7.0)之后不支持iOS8.0之前的模拟器<br>#5.常见问题总结<br>定位不到, 对应的代理方法不执行:<br>首先,检查运行的模拟器是否是iOS8.0之前的系统版本<br>其次,检查模拟器是否设置位置数据 第三,确保代码无问题(一般都是代理没有设置,或者位置管理器对象是局部变量,亦或是位置管理器 第四,绝逼是模拟器BUG, 请重置模拟器(是重置,不是重启)<br>#二. iOS8.0之后定位<br>#1. 前台定位<br>导入CoreLocation框架以及对应的主头文件 <corelocation corelocation.h=""><br>创建CLLocationManager对象并设置代理<pre><code>self.locationM = [[CLLocationManager alloc] init];
self.locationM.delegate = self;
</code></pre>请求前台定位授权, 并在Info.Plist文件中配置Key ( Nslocationwheninuseusagedescription ) [self.locationM requestWhenInUseAuthorization];<br>调用方法,开始更新用户位置信息<br>[self.locationM startUpdatingLocation];<br>在对应的代理方法中获取位置信息<pre><code>-(void)locationManager:(nonnull CLLocationManager *)manager didUpdateL
</code></pre>{<br>NSLog(@”每当请求到位置信息时, 都会调用此方法”);<br>}<br>#2. 后台定位<br>方案一:<br>在前台定位基础上, 勾选后台模式Location updates</corelocation></li>
</ul>
<p>方案二:<br>请求前后台定位授权,并在info.plist文件中配置KEY ( NSLocationAlwaysUsageDescription ) [self.locationM requestAlwaysAuthorization];<br>注意:不需要勾选后台模式, 也可以进行后台定位<br>注意:此时授权状态如果是前后台定位, 那么即使APP退到后台时, 屏幕顶部会也不会出现 蓝条</p>
<p>#3. 监听用户授权状态<br>实现以下代理方法即可<br>// 当用户授权状态发生变化时调用<br>-(void)locationManager:(nonnull CLLocationManager <em>)manager didChangeA {<br>switch (status) {<br>// 用户还未决定<br>case kCLAuthorizationStatusNotDetermined:<br>{<br>NSLog(@”用户还未决定”);<br>break; }<br>// 访问受限(苹果预留选项,暂时没用)<br>case kCLAuthorizationStatusRestricted:<br>{<br>NSLog(@”访问受限”); break;<br>}<br>// 定位关闭时和对此APP授权为never时调用<br> case kCLAuthorizationStatusDenied: {<br>// 定位是否可用(是否支持定位或者定位是否开启) if([CLLocationManager locationServicesEnabled])<br>{<br>NSLog(@”定位开启,但被拒”);<br>// 在此处, 应该提醒用户给此应用授权, 并跳转到”设置”界面让用户进行授权<br>// 在iOS8.0之后跳转到”设置”界面代码<br>NSURL </em>settingURL = [NSURL URLWithString:UIApplicationOpenSett if([[UIApplication sharedApplication] canOpenURL:settingURL]) {<br>                   [[UIApplication sharedApplication] openURL:settingURL];<br>      }<br>}else<br>{<br>NSLog(@”定位关闭,不可用”);<br>}<br>break; }<br>// 获取前后台定位授权<br>case kCLAuthorizationStatusAuthorizedAlways:<br>// case kCLAuthorizationStatusAuthorized: // 失效,不建议使用 {<br>NSLog(@”获取前后台定位授权”); break;<br>}<br>// 获得前台定位授权<br>       case kCLAuthorizationStatusAuthorizedWhenInUse:<br>{<br>NSLog(@”获得前台定位授权”); break;<br>} default:<br>break; }<br>}</p>
<p>#5. 常见问题总结<br>定位不到, 对应的代理方法不执行:<br>首先,检查是否请求授权, 并设置了对应的KEY<br>其次,检查模拟器是否设置位置数据 第三,确保代码无问题(一般都是代理没有设置,或者位置管理器对象是局部变量,亦或是位置管理器 第四,前面都不对那就是模拟器BUG, 请重置模拟器(是重置,不是重启)</p>
<p>#三. iOS9.0 定位补充 </p>
<p>#1. 定位变化<br>前台定位<br>(同iOS8.0之后一致, 无任何变化, 都需要主动请求授权)<br>后台定位 方案一:<br>在前台定位基础上, 勾选后台模式Location updates, 并且设置以下属性为YES<br>     if ([[UIDevice currentDevice].systemVersion floatValue] &gt;= 9.0)<br>      {<br>          self.locationM.allowsBackgroundLocationUpdates = YES;<br>      }<br>方案二:<br>请求前后台定位授权,并在info.plist文件中配置KEY ( NSLocationAlwaysUsageDescription<br>[self.locationM requestAlwaysAuthorization]; </p>
<p>#2. 新的API<br>单次定位请求;<br>代 码: [self.locationM requestAlwaysAuthorization]; 功 能: 获取一次位置信息<br>实现逻辑:<br>(1) 按照定位精确度从低到高进行排序,逐个进行定位.如果在有效时间内, 定位到了精<br>(2) 如果获取到的位置不是精确度最高的那个,也会在定位超时后,通过代理告诉外界. 注意事项:<br>(1) 必须实现代理的-locationManager:didFailWithError:方法 (2) 不能与startUpdatingLocation方法同时使用</p>
<p>#3. 测试环境:</p>
<ol>
<li>XCode版本要求7.0版本以上 2. 模拟器选择iOS9.0之后的版本<br>#4. 常见问题总结<br>单次定位在模拟器上测试不出效果?<br>答: 因为模拟器的位置是固定的, 所以无法测试出效果, 请使用真机进行测试.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目管理Git常用命令]]></title>
      <url>http://lavender1026.github.io/2015/06/20/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86Git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="项目管理Git常用命令"><a href="#项目管理Git常用命令" class="headerlink" title="项目管理Git常用命令"></a>项目管理Git常用命令</h1><h3 id="Git是一个很强大的分布式版本控制系统-它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。"><a href="#Git是一个很强大的分布式版本控制系统-它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。" class="headerlink" title="Git是一个很强大的分布式版本控制系统,它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。"></a>Git是一个很强大的分布式版本控制系统,它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</h3><p>现在的公司大部分都是SVN或者Git，而两者对比下来，git的优点更突出一些<br>Git常用操作命令：<br><a id="more"></a></p>
<p>1) 远程仓库相关命令<br>检出仓库：$ git clone git://github.com/jQuery/jquery.git</p>
<p>查看远程仓库：$ git remote -v</p>
<p>添加远程仓库：$ git remote add [name] [url]</p>
<p>删除远程仓库：$ git remote rm [name]</p>
<p>修改远程仓库：$ git remote set-url –push [name] [newUrl]</p>
<p>拉取远程仓库：$ git pull [remoteName] [localBranchName]</p>
<p>推送远程仓库：$ git push [remoteName] [localBranchName]</p>
<p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：<br>$git push origin test:master // 提交本地test分支作为远程的master分支<br>$git push origin test:test // 提交本地test分支作为远程的test分支<br>2）分支(branch)操作相关命令<br>查看本地分支：$ git branch</p>
<p>查看远程分支：$ git branch -r</p>
<p>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支</p>
<p>切换分支：$ git checkout [name]</p>
<p>创建新分支并立即切换到新分支：$ git checkout -b [name]</p>
<p>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p>
<p>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并</p>
<p>创建远程分支(本地分支push到远程)：$ git push origin [name]</p>
<p>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name]</p>
<p>*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</p>
<p>$git symbolic-ref HEAD refs/heads/[name]</p>
<p>$rm .git/index</p>
<p>$git clean -fdx<br>3）版本(tag)操作相关命令<br>查看版本：$ git tag</p>
<p>创建版本：$ git tag [name]</p>
<p>删除版本：$ git tag -d [name]</p>
<p>查看远程版本：$ git tag -r</p>
<p>创建远程版本(本地版本push到远程)：$ git push origin [name]</p>
<p>删除远程版本：$ git push origin :refs/tags/[name]</p>
<p>合并远程仓库的tag到本地：$ git pull origin –tags</p>
<p>上传本地tag到远程仓库：$ git push origin –tags</p>
<p>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’<br>4) 子模块(submodule)相关操作命令</p>
<p>添加子模块：$ git submodule add [url] [path]<br>如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</p>
<p>初始化子模块：$ git submodule init —-只在首次检出仓库时运行一次就行</p>
<p>更新子模块：$ git submodule update —-每次更新或切换分支后都需要运行一下</p>
<p>删除子模块：（分4步走哦）</p>
<p>1) $ git rm –cached [path]</p>
<p>2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</p>
<p>3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉</p>
<p>4) 手动删除子模块残留的目录</p>
<p>5）忽略一些文件、文件夹不提交<br>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<br>target<br>bin<br>*.db<br>Git 常用命令</p>
<p>git branch 查看本地所有分支</p>
<p>git status 查看当前状态</p>
<p>git commit 提交</p>
<p>git branch -a 查看所有的分支</p>
<p>git branch -r 查看本地所有分支</p>
<p>git commit -am “init” 提交并且加注释</p>
<p>git remote add origin git@192.168.1.119:ndshow</p>
<p>git push origin master 将文件给推到服务器上</p>
<p>git remote show origin 显示远程库origin里的资源</p>
<p>git push origin master:develop</p>
<p>git push origin master:hb-dev 将本地库与服务器上的库进行关联</p>
<p>git checkout –track origin/dev 切换到远程dev分支</p>
<p>git branch -D master develop 删除本地库develop</p>
<p>git checkout -b dev 建立一个新的本地分支dev</p>
<p>git merge origin/dev 将分支dev与当前分支进行合并</p>
<p>git checkout dev 切换到本地dev分支</p>
<p>git remote show 查看远程库</p>
<p>git add .</p>
<p>git rm 文件名(包括路径) 从git中删除指定文件</p>
<p>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来</p>
<p>git config –list 看所有用户</p>
<p>git ls-files 看已经被提交的</p>
<p>git rm [file name] 删除一个文件</p>
<p>git commit -a 提交当前repos的所有的改变</p>
<p>git add [file name] 添加一个文件到git index</p>
<p>git commit -v 当你用－v参数的时候可以看commit的差异</p>
<p>git commit -m “This is the message describing the<br>commit” 添加commit信息</p>
<p>git commit -a -a是代表add，把所有的change加到git index里然后再commit</p>
<p>git commit -a -v 一般提交命令</p>
<p>git log 看你commit的日志</p>
<p>git diff 查看尚未暂存的更新</p>
<p>git rm a.a 移除文件(从暂存区和工作区中删除)</p>
<p>git rm –cached a.a 移除文件(只从暂存区中删除)</p>
<p>git commit -m “remove” 移除文件(从Git中删除)</p>
<p>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</p>
<p>git diff –cached 或 $ git diff –staged 查看尚未提交的更新</p>
<p>git stash push 将文件给push到一个临时空间中</p>
<p>git stash pop 将文件从临时空间pop下来</p>
<p>git remote add origin git@github.com:username/Hello-World.git</p>
<p>git push origin master 将本地项目给提交到服务器中</p>
<p>git pull 本地与服务器端同步<br>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。<br>git push origin serverfix:awesomebranch</p>
<p>git fetch 相当于是从远程获取最新版本到本地，不会自动merge</p>
<p>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：</p>
<p>git branch branch_0.1 master 从主分支master创建branch_0.1分支</p>
<p>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</p>
<p>git checkout branch_1.0/master 切换到branch_1.0/master分支<br>du -hs</p>
<p>mkdir WebApp</p>
<p>cd WebApp</p>
<p>git init</p>
<p>touch README</p>
<p>git add README</p>
<p>git commit -m ‘first commit’</p>
<p>git remote add origin git@github.com:daixu/WebApp.git</p>
<p>git push -u origin master</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods的使用]]></title>
      <url>http://lavender1026.github.io/2015/06/11/CocoaPods%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="CocoaPods的使用"><a href="#CocoaPods的使用" class="headerlink" title="CocoaPods的使用"></a>CocoaPods的使用</h1><ul>
<li>Podfile.lock文件<ul>
<li>最后一次更新Pods时, 所有第三方框架的版本号</li>
</ul>
</li>
<li>常用指令的区别<ul>
<li>pod install<ul>
<li>会根据Podfile.lock文件中列举的版本号来安装第三方框架</li>
<li>如果一开始Podfile.lock文件不存在, 就会按照Podfile文件列举的版本号来安装第三方框架</li>
<li>安装框架之前, 默认会执行pod repo update指令</li>
</ul>
</li>
<li>pod update<ul>
<li>将所有第三方框架更新到最新版本, 并且创建一个新的Podfile.lock文件</li>
<li>安装框架之前, 默认会执行pod repo update指令</li>
</ul>
</li>
<li>pod install –no-repo-update</li>
<li>pod update –no-repo-update<ul>
<li>安装框架之前, 不会执行pod repo update指令”</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SDWebImage的内部实现]]></title>
      <url>http://lavender1026.github.io/2015/05/04/SDWebImage%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>#SDWebImage简介<br>SDWebImage是一个非常常用的开源第三方库,最简单的使用方式是以UIImageView类目的方式提供下载网络图片的方法.除此之外,还可以使用它作为图片异步下载器,图片自动缓存,支持gif动态图等,他会保证相同的URL图片资源只下载一次,永远不会锁住主线程,同时支持GCD和ARC,ARM64.使用SDWebImage下载网络图片可以提高性能.</p>
<p>#在项目中的实际使用</p>
<p>#1.第一步，下载SDWebImage，导入工程。github托管地址<a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">https://github.com/rs/SDWebImage</a></p>
<p>#2.第二步,在需要的地方导入头文件 #import “UIImageView+WebCache.h”</p>
<p>#3.第三步,调用sd_setImageWithURL : 方法缓存图片, 2.0版本是使用setImageWithURL:<br><a id="more"></a></p>
<p>1&gt;图片缓存的基本代码<br>sd_setImageWithURL:<br>[self.image sd_setImageWithURL: imageUrl];<br>2&gt; sd_setImageWithURL:completed:<br>[self.image sd_setImageWithURL: imageUrl completed:^(UIImage <em>iamge,NSError </em>err,SDImageCacheType cacheType, NSURL <em>imageURL){<br>NSLog(@”这里可以在图片加载之后做一些事情”)<br>}];<br>3&gt;设置一张占位图片,当图片加载完成之后在替换<br>sd_setImageWithURL:placeholderImage:<br>[self.image sd_setImageWithURL:imagePath1 placeholderImage:[UIImage imageNamed:@”default”]];<br>4&gt;使用默认图片,而且用block在完成之后做一些事情<br>sd_setImageWithURL:  placeholderImage:  completed:<br>[self.image sd_setImageWithURL:imagePath placeholderImage:[UIImage imageNamed:@”default”] completed:^(UIImage </em>image, NSError <em>error, SDImageCacheType cacheType, NSURL </em>imageURL) {<br>        NSLog(@”图片加载完成后做的事情”);<br>    }];<br>5&gt;sd_setImageWithURL:  placeholderImage: options<br>失败后重试<br>[self.image sd_setImageWithURL:imagePath placeholderImage:[UIImage imageNamed:@”default”] options:SDWebImageRetryFailed];</p>
<p>#可选项options的所有选项</p>
<pre><code>// 失败后重试
SDWebImageRetryFailed = 1 &lt;&lt; 0,

//UI交互期间开始下载，导致延迟下载比如UIScrollView减速。
SDWebImageLowPriority = 1 &lt;&lt; 1,

//只进行内存缓存
SDWebImageCacheMemoryOnly = 1 &lt;&lt; 2,

//这个标志可以渐进式下载,显示的图像是逐步在下载
SDWebImageProgressiveDownload = 1 &lt;&lt; 3,

//刷新缓存
SDWebImageRefreshCached = 1 &lt;&lt; 4,

//后台下载
SDWebImageContinueInBackground = 1 &lt;&lt; 5,

//NSMutableURLRequest.HTTPShouldHandleCookies = YES;

SDWebImageHandleCookies = 1 &lt;&lt; 6,

//允许使用无效的SSL证书
//SDWebImageAllowInvalidSSLCertificates = 1 &lt;&lt; 7,

//优先下载
SDWebImageHighPriority = 1 &lt;&lt; 8,

//延迟占位符
SDWebImageDelayPlaceholder = 1 &lt;&lt; 9,

//改变动画形象
SDWebImageTransformAnimatedImage = 1 &lt;&lt; 10,
</code></pre><p>#二 SDWebImage的内部实现过程<br>1.入口 setImageWithURL:placeholderImage:options:<br>先把  placeholderImage 显示<br>然后   SDWebImageManager 根据 URL 开始处理图片。<br>2.进入SDWebImageManager- downLoadImageWithURL :delegate:options:userInfo:<br>交给SDImageCache从缓存中查找图片是否已经下载完毕(通过方法queryDiskCacheForKey:delegate:userInfo:)<br>3.首先从内存图片缓存中查找是否有图片，如果内存中已经有图片缓存，SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo: 到 SDWebImageManager。<br>4.SDWebImageManagerDelegate 回调 webImageManager:didFinishWithImage: 到 UIImageView+WebCache 等前端展示图片。<br>5.内存缓存中没有,生成NSInvocationOperation 添加到队列开始从硬盘查找图片是否已经缓存.<br>6.根据UELKey在硬盘缓存目录下尝试读取图片文件,这一步实在NSOperation进行的操作,所以会主线程进行结果回调notifyDelegate;<br>7.如果上一操作从硬盘读取到了图片，将图片添加到内存缓存中（如果空闲内存过小，会先清空内存缓存）。SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo:。进而回调展示图片。<br>8.如果从硬盘缓存目录读取不到图片,说明所有缓存中都不存在该图片,需要下载图片,回调imageCache:didNotFindImageForKey: userInfo;<br>9.共享或重新生成一个下载器 SDWebImageDownloader 开始下载图片。<br>10.图片下载由 NSURLConnection 来做，实现相关 delegate 来判断图片下载中、下载完成和下载失败。<br>11.connection:didReceiveData: 中利用 ImageIO 做了按图片下载进度加载效果。<br>12.connectionDidFinishLoading: 数据下载完成后交给 SDWebImageDecoder 做图片解码处理。<br>13.图片解码处理在一个 NSOperationQueue 完成，不会拖慢主线程 UI。如果有需要对下载的图片进行二次处理，最好也在这里完成，效率会好很多。<br>14.在主线程 notifyDelegateOnMainThreadWithInfo: 宣告解码完成，imageDecoder:didFinishDecodingImage:userInfo: 回调给 SDWebImageDownloader。<br>15.imageDownloader:didFinishWithImage: 回调给 SDWebImageManager 告知图片下载完成。<br>16.通知所有的 downloadDelegates 下载完成，回调给需要的地方展示图片。<br>17.将图片保存到 SDImageCache 中，内存缓存和硬盘缓存同时保存。写文件到硬盘也在以单独 NSInvocationOperation 完成，避免拖慢主线程。<br>18.SDImageCache在初始化的时候会注册一些消息通知,在内存警告或者推到后台的时候清理内存图片缓存,应用结束的时候清理过期图片.<br>19.SDWebImage 也提供了 UIButton+WebCache 和 MKAnnotationView+WebCache，方便使用。<br>20.SDWebImagePrefetcher 可以预先下载图片，方便后续使用。<br>SDWebImage库的作用：<br>通过对UIImageView的类别扩展来实现异步加载替换图片的工作。</p>
<p>#主要用到的类和对象：<br>1、UIImageView (WebCache)类别，入口封装，实现读取图片完成后的回调<br>2、SDWebImageManager，对图片进行管理的中转站，记录那些图片正在读取。<br>向下层读取Cache（调用SDImageCache），或者向网络读取对象（调用SDWebImageDownloader） 。<br>实现SDImageCache和SDWebImageDownloader的回调。<br>3、SDImageCache，根据URL的MD5摘要对图片进行存储和读取（实现存在内存中或者存在硬盘上两种实现）<br>实现图片和内存清理工作。<br>4、SDWebImageDownloader，根据URL向网络读取数据（实现部分读取和全部读取后再通知回调两种方式）</p>
<p>其他类：<br>SDWebImageDecoder，异步对图像进行了一次解压</p>
<p>#特别注意</p>
<p>#1、SDImageCache是怎么做数据管理的?<br>SDImageCache分两个部分，一个是内存层面的，一个是硬盘层面的。<br>内存层面的相当是个缓存器，以Key-Value的形式存储图片。当内存不够的时候会清除所有缓存图片。<br>用搜索文件系统的方式做管理，文件替换方式是以时间为单位，剔除时间大于一周的图片文件。<br>当SDWebImageManager向SDImageCache要资源时，先搜索内存层面的数据，如果有直接返回，没有的话去访问磁盘，将图片从磁盘读取出来，然后做Decoder，将图片对象放到内存层面做备份，再返回调用层。</p>
<p>#2、为什么必须做Decoder?<br>通过这个博客：<a href="http://www.cocoanetics.com/2011/10/avoiding-image-decompression-sickness/" target="_blank" rel="external">http://www.cocoanetics.com/2011/10/avoiding-image-decompression-sickness/</a><br>了解到，由于UIImage的imageWithData函数是每次画图的时候才将Data解压成ARGB的图像<br>所以在每次画图的时候，会有一个解压操作，这样效率很低，但是只有瞬时的内存需求。<br>为了提高效率通过SDWebImageDecoder将包装在Data下的资源解压，然后画在另外一张图片上，这样这张新图片就不再需要重复解压了。<br>这种做法是典型的空间换时间的做法.</p>
<p>#最后整理一波思路<br>1.入口 setImageWithURL:placeholderImage:options: 显示占位图<br>                      |<br>        2.SDWebImageManager根据url处理图片<br>                      |</p>
<ol>
<li>SDWebImageManager调用downloadWithURL方法-&gt;让SDImageCache从缓存查找图片是否已经下载                              <pre><code>         |
先从内存缓存中查找                             
       有|
</code></pre></li>
<li>SDImageCacheDelegate回调 didFindImage到SDWebImageManager<br>SDWebImageManagerDelegate回调didFinishWithImage到<br>UIImageView+WebCache 等前端展示图片<pre><code>没有|
</code></pre>5.生成 NSInvocationOperation 添加到队列开始从硬盘查找图片是否已经缓存<pre><code>|
</code></pre></li>
<li>根据URLKey在硬盘缓存目录下尝试读取图片文件.NSOperation中完成<pre><code>读取到|
</code></pre>7.将图片添加到内存缓存中,内存缓存过小,会先清空内存缓存SDImageCacheDelegate回调didFindImage到SDWebImageManager <pre><code>没有读取到|
</code></pre>8.SDImageCacheDelegate回调imagedidNotFindImageForKey<pre><code>|
</code></pre>9.共享或重新生成一个下载器SDWebImageDownloader开始下载图片<pre><code>|
</code></pre>10.图片下载由 NSURLConnection负责 通过监听代理方法可以判断图片下载中和下载完成和下载失败.<pre><code>|
</code></pre>11.可以在connection:didReceiveData:中实现按图片下载进度加载效果<pre><code>|
</code></pre>12.connectionDidFinishLoading: 数据下载完成后交给 SDWebImageDecoder 做图片解码处理。<pre><code>|
</code></pre>13.图片解码处理在一个NSOperationQueue中完成,不会拖慢主线程UI. #mark:如果有需要对下载图片进行二次处理可以在这里<pre><code>|
</code></pre>14.在主线程 notifyDelegateOnMainThreadWithInfo: 宣告解码完成，imageDecoder:didFinishDecodingImage:userInfo: 回调给 SDWebImageDownloader。<pre><code>|
</code></pre>15.imageDownIoader:didFinishWithImage:回调给SDWebImageManager告知图片下载完成<pre><code>|
</code></pre>16.通知所有的 downloadDelegates 下载完成，回调给需要的地方展示图片。<pre><code>|
</code></pre>17.将图片保存到 SDImageCache 中，内存缓存和硬盘缓存同时保存。写文件到硬盘也在以 NSInvocationOperation 完成，避免拖慢主线程<pre><code>|
</code></pre>18.SDImageCache 在初始化的时候会注册一些消息通知，在内存警告或退到后台的时候清理内存图片缓存，应用结束的时候清理过期图片<pre><code>|
</code></pre>19.SDImageCache 在初始化的时候会注册一些消息通知，在内存警告或退到后台的时候清理内存图片缓存，应用结束的时候清理过期图片</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scoket以及TCP/IP的理解]]></title>
      <url>http://lavender1026.github.io/2015/05/02/Scoket%E4%BB%A5%E5%8F%8ATCP:IP%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>#socket简介及特性<br>1.socket（套接字）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。</p>
<p>2.多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，计算机操作系统为应用程序与TCP/IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p>
<p>3.建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket，另一个运行于服务器端，称为ServerSocket。套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p>
<p>Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接,UDP连接同理。<br><a id="more"></a></p>
<p>#socket使用的库函数<br>1.创建套接字</p>
<p>Socket(af,type,protocol)//建立地址和套接字的联系<br>bind(sockid, local addr, addrlen)//服务器端侦听客户端的请求<br>listen( Sockid ,quenlen)//建立服务器/客户端的连接 (面向连接TCP）</p>
<p>2.客户端请求连接</p>
<p>Connect(sockid, destaddr, addrlen)//服务器端等待从编号为Sockid的Socket上接收客户连接请求<br>newsockid=accept(Sockid，Clientaddr, paddrlen)//发送/接收数据</p>
<p>3.面向连接：</p>
<p>send(sockid, buff, bufflen)<br>recv()</p>
<p>4.面向无连接：</p>
<p>sendto(sockid,buff,…,addrlen)<br>recvfrom()</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建博客那些事]]></title>
      <url>http://lavender1026.github.io/2015/01/15/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>很久之前就想把博客从CSDN上迁移过来，只是一直没有时间，最近比较闲就用hexo+git搭建了博客。<br>网上有很多教程都不是很仔细，搭建博客的时候总有意想不到的问题，昨天捣鼓了许久，踩了很多坑。写下这篇博客来帮助一下更多的人。主要是针对几个坑来帮助一下大家</p>
<h2 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h2><p>博客的基本搭建可以参考这个<a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">搭建免费个人博客</a>教程。<br>讲解的十分详细 在此就不在细说啦<br><a id="more"></a></p>
<p>针对几个hexo  命令<br><img src="http://7xuf0o.com1.z0.glb.clouddn.com/Snip20160523_2.png" alt=""><br>报的原因是因为没有获取权限 ，如果你的机器有密码，一般 都要 前面加上sudo 即可<br>而上文中的一个常用的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>也应该改成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo clean &amp;&amp; sudo hexo g &amp;&amp;  sudo hexo d</span><br></pre></td></tr></table></figure>
<p>好了。基本上看到这里，前面的搭建已经做完。推荐的主题<a href="http://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="external">NEXT</a>，按照步骤来基本上没有什么难度。</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>现在就可以去买一个域名链接上你的git仓库，我推荐去<a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云</a>买,方便快捷好管理。<br><br>买完了以后，点击进入控制台<img src="http://7xuf0o.com1.z0.glb.clouddn.com/Snip20160523_3.png" alt="">，直接点击解析，然后按照这个方法进行设置<img src="http://7xuf0o.com1.z0.glb.clouddn.com/Snip20160523_4.png" alt=""><br>注意，并不需要修改万网的DNS，CNAME A指向的git的IP<br>git的IP</p>
<blockquote>
<p>192.30.252.153<br>192.30.252.154</p>
</blockquote>
<p> 随意填写一个或者两个都填也可以<br> 然后回到你的github <img src="" alt="">点击这里创建一个名为CNAME的文件，内容填写你买的域名<br> 然后下载下来，将刚刚创建的CNAME放到博客文件夹的source中 从新执行一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<p>然后去浏览器里输入你的域名吧~~</p>
<h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>评论我是用的DISQUS，DISQUS注册完了以后，点击STARTED进行注册<img src="http://7xuf0o.com1.z0.glb.clouddn.com/Snip20160523_10.png" alt=""><br> 只后会跳转到这个页面<br> <img src="http://7xuf0o.com1.z0.glb.clouddn.com/Snip20160523_5.png" alt=""><br> 注意Category填写Tech<br>填写完毕，跳到<img src="http://7xuf0o.com1.z0.glb.clouddn.com/Snip20160523_9.png" alt=""><br>这里可以不用管setting up 直接点右边的personal site 之后的设置可以设置为默认选项，点完以后选择左边的General<br><img src="http://7xuf0o.com1.z0.glb.clouddn.com/Snip20160523_13.png" alt="">Website URL一栏填写你购买的域名，下面的language选中Chinese即可</p>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>最后如果你想添加图片，可以用图床来存储。这里建议使用<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛</a>这里需要注意，采用七牛进行图床，建立一个空间的时候记得建成为公共空间，否则无法获取到外链地址。</p>
<h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p> 用markdown编辑工具新建一个.md 开头的格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:          #本片博客内容（记得冒号后面添加一个空格）</span><br><span class="line">date: 2016-01-15 22:41:52   #创建时间</span><br><span class="line">tags:   #标签</span><br><span class="line"> - 博客   </span><br><span class="line"> - </span><br><span class="line">categories: 杂记   #分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>然后<br><code>hexo d -g</code></p>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
  
  
</search>
